{"version":3,"sources":["Wallet/Wallet.js","Crypto/Encode.js","Components/ScreenHeader.js","Components/PasswordPrompt.js","Components/Alert.js","Crypto/Hash.js","Crypto/Random.js","assets/IconCoin.png","App.js","Screens/StartScreen.js","Styles/Styles.js","Screens/WalletScreen.js","Screens/ImportScreen.js","Screens/CreateWalletScreen.js","Screens/SettingsScreen.js","Components/ValuePrompt.js","Crypto/Sign.js","Crypto/Encrypt.js","Wallet/Block.js","Styles/OverlayStyles.js","Crypto/Crypto.js"],"names":["Crypto","require","Block","Wallet","address","encryptedSecret","this","inChain","outChain","encrypted","nodeURL","password","async","decrypt","fetch","res","json","_objectArrayToBlockArray","console","log","getAccount","_determineBalance","amount","recipient","passwd","undefined","secret","decryptSecret","block","withAmount","withSender","withRecipient","length","withPreviousHash","hash","build","signBlock","method","headers","body","JSON","stringify","msg","status","balance","forEach","newSecret","getPublic","encrypt","array","blockArray","blockData","push","module","exports","rfc","strOpts","pad","parseOpts","loose","base32Encode","bytes","base32","base32Decode","s","parse","hexEncode","base16","hexDecode","base64urlEncode","base64url","base64urlDecode","ScreenHeader","props","leftComponent","icon","color","iconStyle","onPress","enabled","nav","openDrawer","centerComponent","text","title","style","rightComponent","navigate","containerStyle","Styles","header","Component","PasswordPrompt","useState","setPassword","loading","setLoading","passIn","React","useRef","isVisible","visible","onBackdropPress","onCancel","OverlayStyles","containerMain","ref","label","autoFocus","secureTextEntry","leftIcon","type","name","onChangeText","textInput","textInputContainer","containerActions","actionButton","setTimeout","a","checkPassword","passwdCheck","onPasswordAccept","current","shake","clear","onPasswordReject","Alert","onClose","h3","message","SHA","scryptAsync","scrypt","randomBytes","TextEncoder","TextEncoderLite","update","digest","sha2Hash","hashPassword","salt","encoder","encode","key","saltLength","getRandomBytes","numBytes","Stack","createNativeStackNavigator","Drawer","createDrawerNavigator","App","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","WalletScreens","StartScreen","ImportScreen","CreateWalletScreen","global","WalletScreen","SettingsScreen","container","containerImage","source","image","flex","justifyContent","buttonStyle","button","navigation","styles","StyleSheet","create","backgroundColor","alignItems","containerRow","flexDirection","alignContent","padding","margin","buttonRow","fontSize","paddingHorizontal","headerText","fontWeight","textAlign","resizeMode","width","height","aspectRatio","state","sendAmount","passwdOverlayVisible","alertMessage","alertVisible","amountInRef","createRef","recipientInRef","lastValidSendAmount","wallet","toast","Toast","setState","getBalance","sendTransaction","transactionResult","test","Number","parseInt","replace","bal","toString","repeat","slice","Clipboard","show","duration","updateWallet","checkPasswdReturn","performTransaction","parseSendAmount","WalletIcon","h2","h2Style","balanceToString","activeOpacity","underlayColor","copyToClipboard","alignSelf","editable","placeholder","maxLength","value","processSendAmountText","keyboardType","unlockBtnRef","passwordInRef","secretInput","canDecode","replaceAll","newWalletFromSecret","newWalletFromEncryptedSecret","Cryto","decode","decryptedSecret","RejectButton","processInput","chkPasswd","confirmBtnRef","passwordChkInRef","checkPasswords","createWallet","nodeOverlayVisible","prompt","defaultValue","onValueChange","onAccept","ValuePrompt","EC","Elliptic","eddsa","getKeysFromSecret","keyFromSecret","verifySignature","sig","publicKey","keyFromPublic","Array","from","verify","signMessage","sign","toBytes","nacl","nonceLength","secretbox","data","keyLength","hashedPasswd","encryptionNonce","encryptedData","nonce","open","err","BlockBuilder","sender","previousHash","toAssign","builder","blockBuilder","Error","toHash","determineHash","split","pub","Object","prototype","call"],"mappings":"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","file":"static/js/app.f769b6eb.chunk.js","sourcesContent":["const Crypto = require(\"../Crypto/Crypto.js\");\nconst Block = require(\"./Block.js\");\n\n/**\n * An account on the DAG and the keys required to control it\n */\nclass Wallet {\n  constructor(address, encryptedSecret) {\n    this.address = address;\n    this.inChain = [];\n    this.outChain = [];\n    this.encrypted = encryptedSecret;\n    this.nodeURL = \"http://localhost:6969\";\n  }\n\n  /**\n   * Creates a new wallet object\n   * @param {String} password\n   * @param {Uint8Array} secret\n   * @param {undefined | String} encryptedSecret\n   * @returns\n   */\n  static async createWallet(password) {\n    let secret = Crypto.newSecret();\n    let address = Crypto.getPublic(secret);\n    let encryptedSecret = await Crypto.encrypt(secret, password);\n\n    return new Wallet(address, encryptedSecret);\n  }\n\n  /**\n   * Decrypts a wallet secret using a password\n   * @param {String} password\n   * @returns\n   */\n  async decryptSecret(password) {\n    return await Crypto.decrypt(this.encrypted, password);\n  }\n\n  /**\n   * Retrieves and updates account information from the network\n   */\n  async getAccount() {\n    try {\n      let res = await fetch(\n        this.nodeURL + \"/accounts/account?address=\" + this.address\n      );\n      let json = await res.json();\n\n      this.inChain = Wallet._objectArrayToBlockArray(json.inChain);\n      this.outChain = Wallet._objectArrayToBlockArray(json.outChain);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  /**\n   * Determines an accounts balance after refreshing it from the node\n   * @returns {Number}\n   */\n  async getBalance() {\n    await this.getAccount();\n    return this._determineBalance();\n  }\n\n  /**\n   * Creates an outgoing block from this wallet, and sends it to a node\n   * @param {Number} amount\n   * @param {String} recipient\n   * @param {String} passwd if secret not included, passwd needed to sign transaction\n   * @param {Uint8Array | undefined} secret\n   * @returns {boolean}\n   */\n  async sendTransaction(amount, recipient, passwd, secret = undefined) {\n    if (secret === undefined) secret = await this.decryptSecret(passwd);\n    if (secret === null) return false;\n\n    await this.getAccount(); //refreshes account to ensure we have the latest blocks\n\n    let block = Block()\n      .withAmount(amount)\n      .withSender(this.address)\n      .withRecipient(recipient);\n\n    if (this.outChain.length === 0)\n      block.withPreviousHash(\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n      );\n    else block.withPreviousHash(this.outChain[this.outChain.length - 1].hash);\n\n    block = block.build();\n    block.signBlock(secret);\n\n    try {\n      let res = await fetch(this.nodeURL + \"/block\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n        body: JSON.stringify(block),\n      });\n\n      let json = res.json();\n      console.log(json.msg);\n\n      if (res.status === 200) return true;\n      else return false;\n    } catch (err) {\n      console.log(err);\n      return false;\n    }\n  }\n\n  /**\n   * Determines an accounts balance\n   * @returns {Number}\n   */\n  _determineBalance() {\n    let balance = 0;\n\n    this.inChain.forEach((block) => {\n      balance += block.amount;\n    });\n\n    this.outChain.forEach((block) => {\n      balance -= block.amount;\n    });\n\n    return balance;\n  }\n\n  /**\n   * A way to convert arrays of objects containing block data to an array of blocks\n   * @param {Object[]} array\n   * @return {Block[]}\n   */\n  static _objectArrayToBlockArray(array) {\n    let blockArray = [];\n\n    array.forEach((blockData) => {\n      blockArray.push(Block(blockData).build());\n    });\n\n    return blockArray;\n  }\n}\n\nmodule.exports = Wallet;\n","const rfc = require('rfc4648');\nconst strOpts = {pad: false};\nconst parseOpts = {loose: true};\n\n/**\n * Encodes bytes to base32 string\n * @param {Uint8Array} bytes\n * @return {string}\n */\nfunction base32Encode(bytes) {\n    return rfc.base32.stringify(bytes, strOpts);\n}\n\n/**\n * decodes base32 string to bytes\n * @param {string} s\n * @return {Uint8Array}\n */\nfunction base32Decode(s) {\n    return rfc.base32.parse(s, parseOpts);\n}\n\n/**\n * Encodes bytes to hex string\n * @param {Uint8Array} bytes\n * @return {string}\n */\nfunction hexEncode(bytes) {\n    return rfc.base16.stringify(bytes, strOpts);\n}\n\n/**\n * decodes hex string to bytes\n * @param {string} s\n * @return {Uint8Array}\n */\nfunction hexDecode(s) {\n    return rfc.base16.parse(s, parseOpts);\n}\n\n/**\n * Encodes bytes to base64url string\n * @param {Uint8Array} bytes\n * @return {string}\n */\nfunction base64urlEncode(bytes) {\n    return rfc.base64url.stringify(bytes, strOpts);\n}\n\n/**\n * decodes base64url string to bytes\n * @param {string} s\n * @return {Uint8Array}\n */\nfunction base64urlDecode(s) {\n    return rfc.base64url.parse(s, parseOpts);\n}\n\nmodule.exports = {\n    base32Encode: base32Encode,\n    base32Decode: base32Decode,\n    hexEncode: hexEncode,\n    hexDecode: hexDecode,\n    base64urlEncode: base64urlEncode,\n    base64urlDecode: base64urlDecode\n}\n","import React, { Component } from \"react\";\nimport { Header } from \"react-native-elements\";\nimport Styles from \"../Styles/Styles.js\";\n\nexport default class ScreenHeader extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Header\n        leftComponent={{\n          icon: \"menu\",\n          color: \"#fff\",\n          iconStyle: { color: \"#fff\" },\n          onPress: () => {\n            if (this.props.enabled) this.props.nav.openDrawer();\n          },\n        }}\n        centerComponent={{ text: this.props.title, style: { color: \"#fff\" } }}\n        rightComponent={{\n          icon: \"home\",\n          color: \"#fff\",\n          onPress: () => {\n            if (this.props.enabled) this.props.nav.navigate(\"Start\");\n          },\n        }}\n        containerStyle={Styles.header}\n      />\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Button, Overlay, Input } from \"react-native-elements\";\nimport OverlayStyles from \"../Styles/OverlayStyles.js\";\n\nexport default function PasswordPrompt(props) {\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const passIn = React.useRef();\n\n  const rejectButton = () => {\n    return (\n      <Button\n        title=\"Cancel\"\n        style={OverlayStyles.actionButton}\n        onPress={() => props.onCancel()}\n      />\n    );\n  };\n\n  return (\n    <Overlay isVisible={props.visible} onBackdropPress={props.onCancel}>\n      <View style={OverlayStyles.containerMain}>\n        <Input\n          ref={passIn}\n          label=\"Enter Password: \"\n          autoFocus={true}\n          secureTextEntry={true}\n          leftIcon={{ type: \"font-awesome-5\", name: \"lock\" }}\n          onChangeText={(text) => setPassword(text)}\n          style={OverlayStyles.textInput}\n          containerStyle={OverlayStyles.textInputContainer}\n        />\n      </View>\n      <View style={OverlayStyles.containerActions}>\n        {!loading ? rejectButton() : undefined}\n        <Button\n          title=\"Accept\"\n          style={OverlayStyles.actionButton}\n          loading={loading}\n          onPress={() => {\n            setLoading(true);\n\n            setTimeout(async () => {\n              let passwdCheck = await props.checkPassword(password);\n              setLoading(false);\n\n              if (passwdCheck) {\n                props.onPasswordAccept(passwdCheck);\n              } else {\n                passIn.current.shake();\n                passIn.current.clear();\n                setPassword(\"\");\n                props.onPasswordReject(passwdCheck);\n              }\n            }, 100);\n          }}\n        />\n      </View>\n    </Overlay>\n  );\n}\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport { Button, Overlay, Text } from \"react-native-elements\";\nimport OverlayStyles from \"../Styles/OverlayStyles.js\";\n\nexport default function Alert(props) {\n  return (\n    <Overlay isVisible={props.visible} onBackdropPress={props.onClose}>\n      <View style={OverlayStyles.containerMain}>\n        <Text h3>{props.message}</Text>\n      </View>\n      <View style={OverlayStyles.containerActions}>\n        <Button\n          title=\"OK\"\n          style={OverlayStyles.actionButton}\n          onPress={() => props.onClose()}\n        />\n      </View>\n    </Overlay>\n  );\n}\n","const SHA = require(\"sha.js\");\nconst scryptAsync = require(\"scrypt-js\").scrypt;\nconst randomBytes = require(\"./Random.js\");\nconst TextEncoder = require(\"text-encoder-lite\").TextEncoderLite;\n\nconst N = 16384,\n  r = 8,\n  p = 1; //used by default in nodejs crypto\n\nconst saltLength = 32;\n\n/**\n * Returns the hash of the data provided\n * @param {Uint8Array} bytes\n * @return {Uint8Array}\n */\nfunction hash(bytes) {\n  return sha2Hash(bytes);\n}\n\n/**\n * Returns the SHA2 hash of the data provided\n * @param {Uint8Array} bytes\n * @return {Uint8Array}\n */\nfunction sha2Hash(bytes) {\n  return SHA(\"sha256\").update(bytes).digest();\n}\n\n/**\n * Returns the hashed password using scrypt.\n * @param {String} passwd password to hash\n * @param {Number} length length of derived hash\n * @param {Uint8Array} salt if not provided, random is chosen and returned\n * @return {{salt: Uint8Array, hash: Uint8Array}}\n */\nasync function hashPassword(passwd, length, salt = undefined) {\n  let encoder = new TextEncoder(\"utf-8\");\n\n  if (salt === undefined) salt = randomBytes(saltLength);\n\n  let key = await scryptAsync(encoder.encode(passwd), salt, N, r, p, length); //TODO make better\n  return { hash: key, salt: salt };\n}\n\nmodule.exports = { hash, hashPassword, saltLength };\n","let getRandomBytes = require(\"expo-random\").getRandomBytes;\n\n/**\n * Cryptographically secure random bytes generation\n * @param {Number} numBytes\n * @return {Uint8Array}\n */\nfunction randomBytes(numBytes) {\n  return getRandomBytes(numBytes);\n}\n\nmodule.exports = randomBytes;\n","module.exports = __webpack_public_path__ + \"static/media/IconCoin.597a9af4.png\";","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\nimport Toast from \"react-native-toast-notifications\";\n\nimport StartScreen from \"./Screens/StartScreen\";\nimport WalletScreen from \"./Screens/WalletScreen\";\nimport ImportScreen from \"./Screens/ImportScreen\";\nimport CreateWalletScreen from \"./Screens/CreateWalletScreen\";\nimport SettingsScreen from \"./Screens/SettingsScreen\";\n\nconst Stack = createNativeStackNavigator();\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n  return (\n    <>\n      <NavigationContainer>\n        <Stack.Navigator\n          initialRouteName=\"Start\"\n          screenOptions={{ headerShown: false }}\n        >\n          <Stack.Screen name=\"WalletScreens\" component={WalletScreens} />\n          <Stack.Screen name=\"Start\" component={StartScreen} />\n          <Stack.Screen name=\"Import\" component={ImportScreen} />\n          <Stack.Screen name=\"CreateWallet\" component={CreateWalletScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n      <Toast ref={(ref) => (global[\"Toast\"] = ref)} />\n    </>\n  );\n}\n\nfunction WalletScreens() {\n  return (\n    <Drawer.Navigator\n      initialRouteName=\"Wallet\"\n      screenOptions={{ headerShown: false }}\n    >\n      <Drawer.Screen name=\"Wallet\" component={WalletScreen} />\n      <Drawer.Screen name=\"Settings\" component={SettingsScreen} />\n    </Drawer.Navigator>\n  );\n}\n","import React, { Component } from \"react\";\nimport { View } from \"react-native\";\nimport { Button, Image } from \"react-native-elements\";\nimport Styles from \"../Styles/Styles.js\";\n\nexport default class StartScreen extends Component {\n  render() {\n    return (\n      <View style={Styles.container}>\n        <View style={Styles.containerImage}>\n          <Image\n            source={require(\"../assets/IconCoin.png\")}\n            style={Styles.image}\n          />\n        </View>\n        <View style={{ flex: 1, justifyContent: \"center\" }}>\n          <Button\n            title=\"Create New Wallet\"\n            icon={{ type: \"font-awesome\", name: \"plus-circle\" }}\n            buttonStyle={Styles.button}\n            onPress={() => this.props.navigation.navigate(\"CreateWallet\")}\n          />\n          <Button\n            title=\"Import From Secret\"\n            icon={{ type: \"font-awesome-5\", name: \"file-import\" }}\n            buttonStyle={Styles.button}\n            onPress={() => this.props.navigation.navigate(\"Import\")}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n","import { StyleSheet } from \"react-native\";\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#1c41b7\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  containerRow: {\n    flexDirection: \"row\",\n    backgroundColor: \"#1c41b7\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  containerImage: {\n    flex: 1,\n    alignContent: \"center\",\n    justifyContent: \"space-evenly\",\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: \"#1CA6B5\",\n    padding: 10,\n    margin: 5,\n  },\n  buttonRow: {\n    alignItems: \"center\",\n    backgroundColor: \"#1CA6B5\",\n    padding: 15,\n    margin: 10,\n  },\n  textInput: {\n    color: \"white\",\n    fontSize: 14,\n  },\n  textInputContainer: {\n    paddingHorizontal: 35,\n  },\n  text: {\n    color: \"white\",\n    paddingHorizontal: 15,\n  },\n  headerText: {\n    color: \"white\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    padding: 10,\n  },\n  image: {\n    resizeMode: \"contain\",\n    width: 100,\n    height: undefined,\n    aspectRatio: 1,\n  },\n  header: {\n    backgroundColor: \"#0080D6\",\n    justifyContent: \"flex-start\",\n    width: \"100%\",\n  },\n});\n\nexport default styles;\n","import React, { Component, useState } from \"react\";\nimport { View, TouchableHighlight } from \"react-native\";\nimport { Text, Image, Header, Input, Button } from \"react-native-elements\";\nimport ScreenHeader from \"../Components/ScreenHeader.js\";\nimport * as Clipboard from \"expo-clipboard\";\nimport Styles from \"../Styles/Styles.js\";\nimport PasswordPrompt from \"../Components/PasswordPrompt.js\";\nimport Alert from \"../Components/Alert.js\";\n\n//todo allow long press to paste\n\nexport default class WalletScreen extends Component {\n  state = {\n    recipient: \"\",\n    sendAmount: \"\",\n    balance: 0,\n    loading: false,\n    passwdOverlayVisible: false,\n    alertMessage: \"\",\n    alertVisible: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.amountInRef = React.createRef();\n    this.recipientInRef = React.createRef();\n\n    this.lastValidSendAmount = this.state.sendAmount;\n    this.wallet = global.Wallet;\n    this.toast = global.Toast;\n    console.log(this.wallet);\n  }\n\n  async updateWallet() {\n    this.setState({ loading: true });\n    this.setState({ balance: await this.wallet.getBalance() });\n    this.setState({ loading: false });\n  }\n\n  async performTransaction(amount, recipient, secret) {\n    this.setState({ loading: true });\n\n    let transactionResult = await this.wallet.sendTransaction(\n      amount,\n      recipient,\n      undefined,\n      secret\n    );\n    console.log(transactionResult);\n\n    if (transactionResult) {\n      this.setState({ alertMessage: \"Successfully sent!\" });\n      this.setState({ alertVisible: true });\n    } else {\n      this.setState({ alertMessage: \"Error while sending!\" });\n      this.setState({ alertVisible: true });\n    }\n\n    this.setState({ loading: false });\n  }\n\n  processSendAmountText(text) {\n    let valid = /^$|^\\d+(\\.)?(\\d{1,6})?$/;\n\n    if (valid.test(text)) {\n      this.setState({ sendAmount: text });\n    } else {\n      this.amountInRef.current.shake();\n      this.setState({ sendAmount: this.lastValidSendAmount });\n    }\n  }\n\n  parseSendAmount() {\n    let amount = this.state.sendAmount;\n    if (amount !== \"\") return Number.parseInt(amount.replace(\".\", \"\"));\n    else return null;\n  }\n\n  balanceToString() {\n    let bal = this.state.balance.toString();\n\n    if (bal === \"0\") return bal;\n    else {\n      if (bal.length <= 6) {\n        return \"0.\" + \"0\".repeat(6 - bal.length) + bal;\n      } else {\n        return bal.slice(0, bal.length - 6) + \".\" + bal.slice(bal.length - 6);\n      }\n    }\n  }\n\n  copyToClipboard(text) {\n    Clipboard.setString(text);\n    this.toast.show(\"Copied to clipboard.\", { duration: 2000 });\n  }\n\n  WalletIcon() {\n    return (\n      <View style={Styles.containerImage}>\n        <TouchableHighlight onPress={async () => await this.updateWallet()}>\n          <Image\n            source={require(\"../assets/IconCoin.png\")}\n            style={Styles.image}\n          />\n        </TouchableHighlight>\n      </View>\n    );\n  }\n\n  render() {\n    return (\n      <View style={Styles.container}>\n        <ScreenHeader\n          title=\"WALLET\"\n          nav={this.props.navigation}\n          enabled={!this.state.loading}\n        />\n        <Alert\n          visible={this.state.alertVisible}\n          message={this.state.alertMessage}\n          onClose={() => {\n            this.setState({ alertVisible: false });\n          }}\n        />\n        <PasswordPrompt\n          visible={this.state.passwdOverlayVisible}\n          checkPassword={async (passwd) => {\n            return await this.wallet.decryptSecret(passwd);\n          }}\n          onPasswordAccept={async (checkPasswdReturn) => {\n            this.setState({ passwdOverlayVisible: false });\n\n            await this.performTransaction(\n              this.parseSendAmount(),\n              this.state.recipient,\n              checkPasswdReturn\n            );\n          }}\n          onPasswordReject={(checkPasswdReturn) => {}}\n          onCancel={() => this.setState({ passwdOverlayVisible: false })}\n        />\n        {this.WalletIcon()}\n        <View style={{ flex: 1 }}>\n          <Text h2={true} h2Style={Styles.headerText}>\n            {this.balanceToString()}\n          </Text>\n          <TouchableHighlight\n            activeOpacity={0.6}\n            underlayColor=\"#00C6E5\"\n            onPress={() => {\n              this.copyToClipboard(this.wallet.address);\n            }}\n          >\n            <Text style={[Styles.text, { textAlign: \"center\" }]}>\n              {this.wallet.address}\n            </Text>\n          </TouchableHighlight>\n        </View>\n        <View\n          style={{\n            flex: 3,\n            alignContent: \"flex-start\",\n            alignSelf: \"stretch\",\n          }}\n        >\n          <Input\n            ref={this.recipientInRef}\n            editable={!this.state.loading}\n            label=\"Enter Recipient Address: \"\n            placeholder=\"Address\"\n            leftIcon={{ type: \"font-awesome-5\", name: \"level-up-alt\" }}\n            onChangeText={(text) => this.setState({ recipient: text })}\n            maxLength={52}\n            style={Styles.textInput}\n            containerStyle={Styles.textInputContainer}\n          />\n          <Input\n            ref={this.amountInRef}\n            editable={!this.state.loading}\n            label=\"Enter Amount: \"\n            placeholder=\"Amount\"\n            value={this.state.sendAmount}\n            leftIcon={{ type: \"font-awesome-5\", name: \"coins\" }}\n            onChangeText={(text) => {\n              this.processSendAmountText(text);\n            }}\n            style={Styles.textInput}\n            containerStyle={Styles.textInputContainer}\n            keyboardType=\"decimal-pad\"\n          />\n          <Button\n            title=\"SEND\"\n            loading={this.state.loading}\n            icon={{ type: \"font-awesome-5\", name: \"paper-plane\" }}\n            buttonStyle={[Styles.button, { alignSelf: \"center\" }]}\n            onPress={() => {\n              let amount = this.parseSendAmount;\n\n              if (this.state.recipient.length !== 52) {\n                this.recipientInRef.current.shake();\n                this.setState({ recipient: \"\" });\n              } else if (amount === null || amount > this.state.balance) {\n                this.amountInRef.current.shake();\n                this.setState({ sendAmount: \"\" });\n              } else {\n                this.setState({ passwdOverlayVisible: true });\n              }\n            }}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Text, View } from \"react-native\";\nimport { Button, Input } from \"react-native-elements\";\nimport Alert from \"../Components/Alert.js\";\nimport Crypto from \"../Crypto/Crypto.js\";\nimport Styles from \"../Styles/Styles.js\";\nimport Wallet from \"../Wallet/Wallet.js\";\n\nexport default class ImportScreen extends Component {\n  state = {\n    secret: \"\",\n    passwd: \"\",\n    loading: false,\n    alertVisible: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.unlockBtnRef = React.createRef();\n    this.passwordInRef = React.createRef();\n  }\n\n  async processInput() {\n    let decrypted = undefined;\n    let encryptedSecret = undefined;\n\n    let secretInput = this.state.secret;\n\n    if (\n      secretInput.length > 0 &&\n      Crypto.canDecode(secretInput.replaceAll(\"-\", \"\"))\n    ) {\n      if (secretInput.length === 52) {\n        await this.newWalletFromSecret();\n      } else {\n        await this.newWalletFromEncryptedSecret();\n      }\n    } else {\n      this.setState({ loading: false });\n      this.setState({ alertVisible: true });\n    }\n  }\n\n  async newWalletFromSecret() {\n    let secret = Cryto.decode(this.state.secret);\n    let address = Crypto.getPublic(secret);\n    let encryptedSecret = await Crypto.encrypt(secret, this.state.passwd);\n\n    this.setState({ loading: false });\n\n    global.Wallet = new Wallet(address, encryptedSecret);\n    this.props.navigation.navigate(\"WalletScreen\");\n  }\n\n  async newWalletFromEncryptedSecret() {\n    let decryptedSecret = await Crypto.decrypt(\n      this.state.secret,\n      this.state.passwd\n    );\n\n    this.setState({ loading: false });\n\n    if (decryptedSecret) {\n      global.Wallet = new Wallet(\n        Crypto.getPublic(decryptedSecret),\n        this.state.secret\n      );\n      this.props.navigation.navigate(\"WalletScreen\");\n    } else {\n      this.passwordInRef.current.shake();\n      this.passwordInRef.current.clear();\n      this.setState({ passwd: \"\" });\n    }\n  }\n\n  render() {\n    return (\n      <View style={Styles.container}>\n        <Alert\n          visible={this.state.alertVisible}\n          message=\"Error processing secret!\"\n          onClose={() => {\n            this.setState({ alertVisible: false });\n          }}\n        />\n        <Input\n          label=\"Enter Secret:\"\n          placeholder=\"Secret\"\n          leftIcon={{ type: \"font-awesome\", name: \"user-secret\" }}\n          onChangeText={(text) => this.setState({ secret: text })}\n          editable={!this.state.loading}\n          style={Styles.textInput}\n          containerStyle={Styles.textInputContainer}\n        />\n        <Input\n          ref={this.passwordInRef}\n          label=\"Enter password: \"\n          placeholder=\"password\"\n          leftIcon={{ type: \"font-awesome\", name: \"lock\" }}\n          onChangeText={(text) => this.setState({ passwd: text })}\n          editable={!this.state.loading}\n          secureTextEntry={true}\n          style={Styles.textInput}\n          containerStyle={Styles.textInputContainer}\n        />\n        <View style={Styles.containerRow}>\n          {!this.state.loading ? (\n            <RejectButton navigation={this.props.navigation} />\n          ) : undefined}\n          <Button\n            ref={this.unlockBtnRef}\n            icon={{ type: \"font-awesome\", name: \"unlock\" }}\n            onPress={() => {\n              this.setState({ loading: true });\n\n              setTimeout(async () => {\n                this.processInput();\n              }, 100); //delay needed for mobile anims\n            }}\n            buttonStyle={Styles.buttonRow}\n            loading={this.state.loading}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nclass RejectButton extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Button\n        icon={{ type: \"font-awesome\", name: \"window-close\" }}\n        onPress={() => this.props.navigation.navigate(\"Start\")}\n        buttonStyle={Styles.buttonRow}\n      />\n    );\n  }\n}\n","import React, { Component, useState } from \"react\";\nimport { Text, View, Alert } from \"react-native\";\nimport { Button, Input } from \"react-native-elements\";\nimport Crypto from \"../Crypto/Crypto.js\";\nimport Styles from \"../Styles/Styles.js\";\nimport Wallet from \"../Wallet/Wallet.js\";\n\nexport default class CreateWalletScreen extends Component {\n  state = {\n    passwd: \"\",\n    chkPasswd: \"\",\n    loading: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.confirmBtnRef = React.createRef();\n    this.passwordInRef = React.createRef();\n    this.passwordChkInRef = React.createRef();\n  }\n\n  checkPasswords() {\n    return this.state.passwd === this.state.chkPasswd;\n  }\n\n  render() {\n    return (\n      <View style={Styles.container}>\n        <Input\n          ref={this.passwordInRef}\n          label=\"Enter Password:\"\n          placeholder=\"Password\"\n          leftIcon={{ type: \"font-awesome\", name: \"lock\" }}\n          onChangeText={(text) => this.setState({ passwd: text })}\n          editable={!this.state.loading}\n          secureTextEntry={true}\n          style={Styles.textInput}\n          containerStyle={Styles.textInputContainer}\n        />\n        <Input\n          ref={this.passwordChkInRef}\n          label=\"Confirm password: \"\n          placeholder=\"Confirm\"\n          leftIcon={{ type: \"font-awesome\", name: \"lock\" }}\n          onChangeText={(text) => this.setState({ chkPasswd: text })}\n          editable={!this.state.loading}\n          secureTextEntry={true}\n          style={Styles.textInput}\n          containerStyle={Styles.textInputContainer}\n        />\n        <View style={Styles.containerRow}>\n          {\n            !this.state.loading ? (\n              <RejectButton navigation={this.props.navigation} /> //if not loading, display reject button\n            ) : undefined //else\n          }\n\n          <Button\n            ref={this.confirmBtnRef}\n            icon={{ type: \"font-awesome\", name: \"check\" }}\n            onPress={() => {\n              if (this.checkPasswords()) {\n                this.setState({ loading: true });\n\n                setTimeout(async () => {\n                  let wallet = await Wallet.createWallet(this.state.passwd);\n                  this.setState({ loading: false });\n\n                  global.Wallet = wallet;\n                  this.props.navigation.navigate(\"WalletScreens\");\n                }, 100); //delay allows loading anim to play on mobile\n              } else {\n                this.passwordInRef.current.shake();\n                this.passwordChkInRef.current.shake();\n              }\n            }}\n            buttonStyle={Styles.buttonRow}\n            loading={this.state.loading}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nclass RejectButton extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <Button\n        icon={{ type: \"font-awesome\", name: \"window-close\" }}\n        onPress={() => this.props.navigation.navigate(\"Start\")}\n        buttonStyle={Styles.buttonRow}\n      />\n    );\n  }\n}\n","import React, { Component, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Button, Overlay, Input } from \"react-native-elements\";\nimport ScreenHeader from \"../Components/ScreenHeader.js\";\nimport ValuePrompt from \"../Components/ValuePrompt.js\";\nimport PasswordPrompt from \"../Components/PasswordPrompt.js\";\nimport * as Clipboard from \"expo-clipboard\";\nimport Styles from \"../Styles/Styles.js\";\nimport Crypto from \"../Crypto/Crypto.js\";\n\nexport default class SettingsScreen extends Component {\n  state = {\n    nodeOverlayVisible: false,\n    passwdOverlayVisible: false,\n    nodeURL: global.Wallet.nodeURL,\n  };\n\n  constructor(props) {\n    super(props);\n    this.toast = global.Toast;\n    this.wallet = global.Wallet;\n  }\n\n  copyToClipboard(text) {\n    Clipboard.setString(text);\n    this.toast.show(\"Copied to clipboard.\", { duration: 2000 });\n  }\n\n  render() {\n    return (\n      <View style={Styles.container}>\n        <ScreenHeader\n          title=\"SETTINGS\"\n          nav={this.props.navigation}\n          enabled={true}\n        />\n\n        <ValuePrompt\n          visible={this.state.nodeOverlayVisible}\n          prompt=\"Enter Node URL:\"\n          defaultValue={this.wallet.nodeURL}\n          icon={{ type: \"font-awesome-5\", name: \"link\" }}\n          onValueChange={(text) => this.setState({ nodeURL: text })}\n          onCancel={() => this.setState({ nodeOverlayVisible: false })}\n          onAccept={() => {\n            this.wallet.nodeURL = this.state.nodeURL;\n            this.toast.show(\"Value Changed\", { duration: 2000 });\n            this.setState({ nodeOverlayVisible: false });\n          }}\n        />\n\n        <PasswordPrompt\n          visible={this.state.passwdOverlayVisible}\n          checkPassword={async (passwd) => {\n            return await this.wallet.decryptSecret(passwd);\n          }}\n          onPasswordAccept={(checkPasswdReturn) => {\n            let secret = Crypto.encode(checkPasswdReturn);\n            this.setState({ passwdOverlayVisible: false });\n            this.copyToClipboard(secret); //has to be after overlay closed, or copy doesnt work on web...\n          }}\n          onPasswordReject={(checkPasswdReturn) => {}}\n          onCancel={() => this.setState({ passwdOverlayVisible: false })}\n        />\n\n        <View\n          style={{\n            flex: 1,\n            alignContent: \"center\",\n            alignSelf: \"stretch\",\n          }}\n        >\n          <Button\n            title=\"Change Node URL\"\n            buttonStyle={Styles.button}\n            onPress={() => this.setState({ nodeOverlayVisible: true })}\n          />\n          <Button\n            title=\"Export Encrypted Secret\"\n            buttonStyle={Styles.button}\n            onPress={() => {\n              this.copyToClipboard(this.wallet.encrypted);\n            }}\n          />\n          <Button\n            title=\"Export Decrypted Secret\"\n            buttonStyle={Styles.button}\n            onPress={() => this.setState({ passwdOverlayVisible: true })}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport { Button, Overlay, Input } from \"react-native-elements\";\nimport OverlayStyles from \"../Styles/OverlayStyles.js\";\n\nexport default function ValuePrompt(props) {\n  return (\n    <Overlay isVisible={props.visible} onBackdropPress={props.onCancel}>\n      <View style={OverlayStyles.containerMain}>\n        <Input\n          label={props.prompt}\n          autoFocus={true}\n          defaultValue={props.defaultValue}\n          leftIcon={props.icon}\n          onChangeText={(text) => props.onValueChange(text)}\n          style={OverlayStyles.textInput}\n          containerStyle={OverlayStyles.textInputContainer}\n        />\n      </View>\n      <View style={OverlayStyles.containerActions}>\n        <Button\n          title=\"Cancel\"\n          style={OverlayStyles.actionButton}\n          onPress={() => props.onCancel()}\n        />\n        <Button\n          title=\"Accept\"\n          style={OverlayStyles.actionButton}\n          onPress={() => props.onAccept()}\n        />\n      </View>\n    </Overlay>\n  );\n}\n","const Elliptic = require('elliptic').eddsa;\nconst EC = new  Elliptic('ed25519');\nconst hexEncode = require('./Encode.js').hexEncode;\n\n/**\n * Gets a key pair from a secret\n * @param {Uint8Array} secret\n */\nfunction getKeysFromSecret(secret) {\n    return EC.keyFromSecret(secret)\n}\n\n/**\n * returns the corresponding public address of a secret, in bytes\n * @param {Uint8Array} secret\n * @return {Uint8Array}\n */\nfunction getPublic(secret) {\n    return getKeysFromSecret(secret).getPublic()\n}\n\n/**\n * Signs a message in bytes with a pair of keys\n * @param {Uint8Array} msg to sign\n * @param {Uint8Array} secret to sign with\n * @return {Uint8Array}\n */\nfunction signMessage(msg, secret) {\n    return getKeysFromSecret(secret).sign(msg).toBytes();\n}\n\n/**\n * Validates a message and its corresponding signature\n * @param {Uint8Array} msg\n * @param {Uint8Array} sig\n * @param {Uint8Array} publicKey\n * @return {boolean}\n */\nfunction verifySignature(msg, sig, publicKey) {\n    publicKey = hexEncode(publicKey);\n    publicKey = EC.keyFromPublic(publicKey, 'hex');\n    sig = Array.from(sig);\n    return publicKey.verify(msg, sig);\n}\n\nmodule.exports = {verifySignature: verifySignature, signMessage: signMessage, getPublic: getPublic};\n\n\n","const hashPassword = require(\"./Hash.js\").hashPassword;\nconst { base32Encode, base32Decode } = require(\"./Encode.js\");\nconst nacl = require(\"tweetnacl\");\nconst randomBytes = require(\"./Random.js\");\n\n/**\n * encrypts some data with a password\n * @param {Uint8Array} data\n * @param {String} passwd\n * @return {String}\n */\nasync function encrypt(data, passwd) {\n  let hashedPasswd = await hashPassword(passwd, nacl.secretbox.keyLength);\n  let encryptionNonce = randomBytes(nonceLength());\n  let encryptedData = nacl.secretbox(data, encryptionNonce, hashedPasswd.hash);\n\n  return (\n    base32Encode(encryptionNonce) +\n    \"-\" +\n    base32Encode(hashedPasswd.salt) +\n    \"-\" +\n    base32Encode(encryptedData)\n  );\n}\n\n/**\n *\n * @param {Uint8Array} encryptedData\n * @param {string} passwd\n * @param {Uint8Array} salt\n * @param {Uint8Array} nonce\n * @returns {null}\n */\nasync function decrypt(encryptedData, passwd, salt, nonce) {\n  let hashedPasswd = await hashPassword(passwd, nacl.secretbox.keyLength, salt);\n  let data = null;\n\n  try {\n    data = nacl.secretbox.open(encryptedData, nonce, hashedPasswd.hash);\n  } catch (err) {\n    console.log(err);\n    //do nothing\n  }\n\n  return data;\n}\n\nfunction nonceLength() {\n  return nacl.secretbox.nonceLength;\n}\n\nmodule.exports = {\n  encrypt: encrypt,\n  decrypt: decrypt,\n  nonceLength: nonceLength,\n};\n","const hexDecode = require(\"../Crypto/Encode\").hexDecode;\nconst Crypto = require(\"../Crypto/Crypto.js\");\n\n/*\nUSAGE:\n\nimporting this file imports BlockBuilder.Block() method. Use this method to fill in a blocks data, by using the\nBlock.with_PROPERTY_NAME_() methods, then build the block using Block.build().\n */\n\n/**\n * Class designed to make initializing a Block easier, and easier to adapt to future requirements. Ensure\n * functions marked REQUIRED are used before building the block with this.build()\n */\nclass BlockBuilder {\n  /**\n   * initializes the builder. Set the properties of a new block using the functions withPROP_NAME(VALUE), where\n   * PROP_NAME is the property to set and VALUE is what to set the property as, before building the new block with\n   * .build(). If all of the new blocks properties are already assigned to an object, the properties can be directly\n   * added to the new block by passing the object as an argument here.\n   * @param {Object | undefined} toAssign all properties of this object will be assigned to our new block\n   * @returns {BlockBuilder}\n   * @constructor\n   */\n  static Block(toAssign = undefined) {\n    let builder = new BlockBuilder();\n    if (toAssign !== undefined) Object.assign(builder, toAssign);\n    return builder;\n  }\n\n  /**\n   * Adds a sender to the new Block. sender should be a base32 string. REQUIRED\n   * @param {String} sender\n   * @returns {BlockBuilder}\n   */\n  withSender(sender) {\n    this.sender = sender;\n    return this;\n  }\n\n  /**\n   * Adds a recipient to the new Block. recipient should be a base32 string. REQUIRED\n   * @param {String} recipient\n   * @returns {BlockBuilder}\n   */\n  withRecipient(recipient) {\n    this.recipient = recipient;\n    return this;\n  }\n\n  /**\n   * Adds an amount to the new Block. REQUIRED\n   * @param {Number} amount\n   * @returns {BlockBuilder}\n   */\n  withAmount(amount) {\n    this.amount = amount;\n    return this;\n  }\n\n  /**\n   * previous hash to include in the new block. All hashes should be base32 string. REQUIRED\n   * @param {String} previousHash\n   * @returns {BlockBuilder}\n   */\n  withPreviousHash(previousHash) {\n    this.previousHash = previousHash;\n    return this;\n  }\n\n  /**\n   * The hash of the new block. If provided should be a base32 string. NOT REQUIRED, if not provided please\n   * determine Blocks hash after block has been built to make the block valid.\n   * @param {String} hash\n   * @returns {BlockBuilder}\n   */\n  withHash(hash) {\n    this.hash = hash;\n    return this;\n  }\n\n  /**\n   * The signature of the new block. If provided should be a base32 string. NOT REQUIRED, to make block valid\n   * please sign it's hash with a private key after the block is built and hash is determined.\n   * @param {String} sig\n   * @returns {BlockBuilder}\n   */\n  withSig(sig) {\n    this.sig = sig;\n    return this;\n  }\n\n  /**\n   * Builds and returns a Block with the values specified by calling the other builder functions.\n   * @returns {Block}\n   */\n  build() {\n    return new Block(this);\n  }\n}\n\n/**\n * Represents a block in an account.\n */\nclass Block {\n  /**\n   * Represents a block in an account. This class should only be instantiated by the BlockBuilder Class.\n   * @param {BlockBuilder} blockBuilder\n   */\n  constructor(blockBuilder) {\n    // Ensuring required parameters are set\n    if (blockBuilder.sender === undefined)\n      throw new Error(\n        \"Blocks require a sender! set a sender when building with: .withSender(SENDER NAME HERE)\"\n      );\n    if (blockBuilder.recipient === undefined)\n      throw new Error(\n        \"Blocks require a recipient! set a recipient when building with: .withRecipient(RECIPIENT NAME HERE)\"\n      );\n    if (blockBuilder.amount === undefined)\n      throw new Error(\n        \"Blocks require an amount! set an amount when building with: .withAmount(AMOUNT HERE)\"\n      );\n    if (blockBuilder.previousHash === undefined)\n      throw new Error(\n        \"Blocks require a previousHash! set previousHash when building with: .withPreviousHash(PREVIOUS HASH HERE)\"\n      );\n\n    //Sets block parameters\n    this.sender = blockBuilder.sender;\n    this.recipient = blockBuilder.recipient;\n    this.amount = blockBuilder.amount;\n    this.previousHash = blockBuilder.previousHash;\n    this.hash = blockBuilder.hash;\n    this.sig = blockBuilder.sig;\n  }\n\n  /**\n   * Determines a blocks hash\n   */\n  determineHash() {\n    let toHash = this.sender + this.recipient;\n    let amount = Crypto.encode(hexDecode(this.amount.toString(16)));\n    toHash += amount + this.previousHash;\n\n    return Crypto.encode(Crypto.hash(Crypto.decode(toHash)));\n  }\n\n  /**\n   * signs this block's hash with a secret. If no hash, determines it first.\n   * @param {Buffer} secret to sign with\n   */\n  signBlock(secret) {\n    if (this.hash === undefined) this.hash = this.determineHash();\n\n    this.sig = Crypto.encode(\n      Crypto.signMessage(Crypto.decode(this.hash), secret)\n    );\n  }\n}\n\nmodule.exports = BlockBuilder.Block;\n","import { StyleSheet } from \"react-native\";\n\nconst styles = StyleSheet.create({\n  containerMain: {},\n  containerActions: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  actionButton: {\n    alignItems: \"center\",\n    color: \"#1CA6B5\",\n    backgroundColor: \"white\",\n    padding: 5,\n  },\n  textInput: {\n    fontSize: 14,\n  },\n  textInputContainer: {\n    paddingHorizontal: 35,\n  },\n});\n\nexport default styles;\n","const hash = require(\"./Hash.js\").hash;\nconst saltLength = require(\"./Hash.js\").saltLength;\nconst getRandomBytes = require(\"./Random.js\");\nconst { signMessage, verifySignature, getPublic } = require(\"./Sign.js\");\nconst { base32Encode, base32Decode } = require(\"./Encode.js\");\nconst { encrypt, decrypt, nonceLength } = require(\"./Encrypt.js\");\n\nclass Crypto {\n  /**\n   * returns a 32 byte hash of data provided\n   * @param {Uint8Array} bytes\n   * @return {Uint8Array}\n   */\n  static hash(bytes) {\n    return hash(bytes);\n  }\n\n  /**\n   * Returns an encrypted string of data\n   * @param {Uint8Array} data\n   * @param {string} passwd\n   * @return {string}\n   */\n  static async encrypt(data, passwd) {\n    return await encrypt(data, passwd);\n  }\n\n  /**\n   * returns a byte array of the decrypted data, or null if unsuccessful decryption\n   * @param {String} encrypted\n   * @param passwd\n   * @return {Uint8Array | null}\n   */\n  static async decrypt(encrypted, passwd) {\n    let split = encrypted.split(\"-\");\n    let nonce = this.decode(split[0]);\n    let salt = this.decode(split[1]);\n    let data = this.decode(split[2]);\n\n    return await decrypt(data, passwd, salt, nonce);\n  }\n\n  /**\n   * signs a message with the secret provided\n   * @param {Uint8Array} msg\n   * @param {Uint8Array} secret\n   * @return {Uint8Array}\n   */\n  static signMessage(msg, secret) {\n    return signMessage(msg, secret);\n  }\n\n  /**\n   * Validates a message was signed by a given public key\n   * @param {Uint8Array} msg\n   * @param {Uint8Array} sig\n   * @param {String | Uint8Array} pub\n   * @return {boolean}\n   */\n  static verifySignature(msg, sig, pub) {\n    if (Object.prototype.toString.call(pub) === \"[object String]\")\n      pub = this.decode(pub);\n    return verifySignature(msg, sig, pub);\n  }\n\n  /**\n   * Returns a secrets corresponding public key\n   * @param {Uint8Array} secret\n   * @return {string}\n   */\n  static getPublic(secret) {\n    return this.encode(getPublic(secret));\n  }\n\n  /**\n   * returns a new randomly generated secret for private key use.\n   * @returns {Uint8Array}\n   */\n  static newSecret() {\n    return this.randomBytes(32);\n  }\n\n  /**\n   * Cryptographically secure random bytes generation\n   * @param {Number} numBytes\n   * @return {Uint8Array}\n   */\n  static randomBytes(numBytes) {\n    return getRandomBytes(numBytes);\n  }\n\n  /**\n   * encodes bytes to string\n   * @param {Uint8Array} bytes\n   * @return {string} base32 encoded string\n   */\n  static encode(bytes) {\n    return base32Encode(bytes);\n  }\n\n  /**\n   * decodes a string to bytes\n   * @param {String} s\n   * @return {Uint8Array}\n   */\n  static decode(s) {\n    return base32Decode(s);\n  }\n\n  /**\n   * Returns whether able to decode a string to bytes or not\n   * @param {String} s\n   * @returns {boolean}\n   */\n  static canDecode(s) {\n    try {\n      Crypto.decode(s);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\nmodule.exports = Crypto;\n"],"sourceRoot":""}