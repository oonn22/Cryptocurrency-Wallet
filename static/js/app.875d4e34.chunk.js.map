{"version":3,"sources":["Crypto/Encode.js","Wallet/Wallet.js","Components/ScreenHeader.js","Components/PasswordPrompt.js","Crypto/Hash.js","Crypto/Random.js","assets/IconCoin.png","App.js","Screens/StartScreen.js","Styles/Styles.js","Screens/WalletScreen/WalletScreen.js","Screens/WalletScreen/Components/WalletIcon.js","Screens/WalletScreen/Components/BalanceDisplay.js","Screens/WalletScreen/Components/AddressDisplay.js","Screens/WalletScreen/Components/TransactionGUI.js","Screens/ImportScreen.js","Components/Alert.js","Screens/CreateWalletScreen.js","Screens/SettingsScreen.js","Components/ValuePrompt.js","Crypto/Sign.js","Crypto/Encrypt.js","Wallet/Block.js","Styles/OverlayStyles.js","Crypto/Crypto.js"],"names":["rfc","require","strOpts","pad","parseOpts","loose","module","exports","base32Encode","bytes","base32","stringify","base32Decode","s","parse","hexEncode","base16","hexDecode","length","base64urlEncode","base64url","base64urlDecode","Crypto","Block","Wallet","address","encryptedSecret","this","inChain","outChain","encrypted","nodeURL","password","async","decrypt","fetch","res","json","_objectArrayToBlockArray","console","log","getAccount","_determineBalance","amount","recipient","passwd","undefined","secret","decryptSecret","block","withAmount","withSender","withRecipient","withPreviousHash","hash","build","signBlock","method","headers","body","JSON","mode","status","balance","forEach","newSecret","getPublic","encrypt","array","blockArray","blockData","push","ScreenHeader","props","leftComponent","icon","color","iconStyle","onPress","enabled","nav","openDrawer","centerComponent","text","title","style","rightComponent","navigate","containerStyle","Styles","header","Component","PasswordPrompt","useState","setPassword","loading","setLoading","passIn","React","useRef","isVisible","visible","onBackdropPress","onCancel","OverlayStyles","containerMain","ref","label","autoFocus","secureTextEntry","leftIcon","type","name","onChangeText","textInput","textInputContainer","containerActions","actionButton","setTimeout","a","checkPassword","passwdCheck","onPasswordAccept","current","shake","clear","onPasswordReject","SHA3","sha3_256","scryptAsync","keccak256","scrypt","randomBytes","TextEncoder","TextEncoderLite","Uint8Array","digest","sha3Hash","hashPassword","salt","encoder","encode","key","saltLength","getRandomBytes","numBytes","Stack","createNativeStackNavigator","Drawer","createDrawerNavigator","App","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","WalletScreens","StartScreen","ImportScreen","CreateWalletScreen","global","WalletScreen","SettingsScreen","container","containerImage","source","image","flex","justifyContent","buttonStyle","button","navigation","styles","StyleSheet","create","backgroundColor","alignItems","containerRow","flexDirection","alignContent","padding","margin","buttonRow","fontSize","paddingHorizontal","headerText","fontWeight","textAlign","resizeMode","width","height","aspectRatio","state","wallet","updateWallet","then","setState","getBalance","alignSelf","afterSend","WalletIcon","activeOpacity","underlayColor","BalanceDisplay","bal","toString","repeat","slice","h2","h2Style","balanceToString","AddressDisplay","toast","Toast","Clipboard","show","duration","copyToClipboard","TransactionGUI","sendAmount","passwdOverlayVisible","amountInRef","createRef","recipientInRef","lastValidSendAmount","userInput","test","includes","amounts","split","Number","parseInt","sendTransaction","checkPasswdReturn","performTransaction","parseSendAmount","onLongPress","longPressPaste","delayLongPress","value","editable","placeholder","onKeyPress","e","invalidLength","nativeEvent","maxLength","validateSendAmountText","keyboardType","alertVisible","unlockBtnRef","passwordInRef","secretInput","canDecode","replaceAll","newWalletFromSecret","newWalletFromEncryptedSecret","decode","decryptedSecret","message","onClose","RejectButton","processInput","Alert","h3","chkPasswd","confirmBtnRef","passwordChkInRef","checkPasswords","createWallet","nodeOverlayVisible","prompt","defaultValue","onValueChange","onAccept","ValuePrompt","EC","Elliptic","eddsa","getKeysFromSecret","keyFromSecret","verifySignature","msg","sig","publicKey","keyFromPublic","Array","from","verify","signMessage","sign","toBytes","nacl","nonceLength","secretbox","data","keyLength","hashedPasswd","encryptionNonce","encryptedData","nonce","open","err","BlockBuilder","sender","previousHash","toAssign","builder","blockBuilder","Error","prevHash","toHash","determineHash","pub","Object","prototype","call"],"mappings":"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","file":"static/js/app.875d4e34.chunk.js","sourcesContent":["const rfc = require(\"rfc4648\");\r\nconst strOpts = { pad: false };\r\nconst parseOpts = { loose: true };\r\n\r\n/**\r\n * Encodes bytes to base32 string\r\n * @param {Uint8Array} bytes\r\n * @return {string}\r\n */\r\nfunction base32Encode(bytes) {\r\n  return rfc.base32.stringify(bytes, strOpts);\r\n}\r\n\r\n/**\r\n * decodes base32 string to bytes\r\n * @param {string} s\r\n * @return {Uint8Array}\r\n */\r\nfunction base32Decode(s) {\r\n  return rfc.base32.parse(s, parseOpts);\r\n}\r\n\r\n/**\r\n * Encodes bytes to hex string\r\n * @param {Uint8Array} bytes\r\n * @return {string}\r\n */\r\nfunction hexEncode(bytes) {\r\n  return rfc.base16.stringify(bytes, strOpts);\r\n}\r\n\r\n/**\r\n * decodes hex string to bytes\r\n * @param {string} s\r\n * @return {Uint8Array}\r\n */\r\nfunction hexDecode(s) {\r\n  if (s.length % 2 === 1) s = \"0\" + s;\r\n  return rfc.base16.parse(s, parseOpts);\r\n}\r\n\r\n/**\r\n * Encodes bytes to base64url string\r\n * @param {Uint8Array} bytes\r\n * @return {string}\r\n */\r\nfunction base64urlEncode(bytes) {\r\n  return rfc.base64url.stringify(bytes, strOpts);\r\n}\r\n\r\n/**\r\n * decodes base64url string to bytes\r\n * @param {string} s\r\n * @return {Uint8Array}\r\n */\r\nfunction base64urlDecode(s) {\r\n  return rfc.base64url.parse(s, parseOpts);\r\n}\r\n\r\nmodule.exports = {\r\n  base32Encode: base32Encode,\r\n  base32Decode: base32Decode,\r\n  hexEncode: hexEncode,\r\n  hexDecode: hexDecode,\r\n  base64urlEncode: base64urlEncode,\r\n  base64urlDecode: base64urlDecode,\r\n};\r\n","const Crypto = require(\"../Crypto/Crypto.js\");\r\nconst Block = require(\"./Block.js\");\r\n\r\n/**\r\n * An account on the DAG and the keys required to control it\r\n */\r\nclass Wallet {\r\n  constructor(address, encryptedSecret) {\r\n    this.address = address;\r\n    this.inChain = [];\r\n    this.outChain = [];\r\n    this.encrypted = encryptedSecret;\r\n    this.nodeURL = \"https://oonn22-node.tk:2096\";\r\n  }\r\n\r\n  /**\r\n   * Creates a new wallet object\r\n   * @param {String} password\r\n   * @param {Uint8Array} secret\r\n   * @param {undefined | String} encryptedSecret\r\n   * @returns\r\n   */\r\n  static async createWallet(password) {\r\n    let secret = Crypto.newSecret();\r\n    let address = Crypto.getPublic(secret);\r\n    let encryptedSecret = await Crypto.encrypt(secret, password);\r\n\r\n    return new Wallet(address, encryptedSecret);\r\n  }\r\n\r\n  /**\r\n   * Decrypts a wallet secret using a password\r\n   * @param {String} password\r\n   * @returns\r\n   */\r\n  async decryptSecret(password) {\r\n    return await Crypto.decrypt(this.encrypted, password);\r\n  }\r\n\r\n  /**\r\n   * Retrieves and updates account information from the network\r\n   */\r\n  async getAccount() {\r\n    try {\r\n      let res = await fetch(\r\n        this.nodeURL + \"/accounts/account?address=\" + this.address\r\n      );\r\n      let json = await res.json();\r\n\r\n      this.inChain = Wallet._objectArrayToBlockArray(json.inChain);\r\n      this.outChain = Wallet._objectArrayToBlockArray(json.outChain);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines an accounts balance after refreshing it from the node\r\n   * @returns {Number}\r\n   */\r\n  async getBalance() {\r\n    await this.getAccount();\r\n    return this._determineBalance();\r\n  }\r\n\r\n  /**\r\n   * Creates an outgoing block from this wallet, and sends it to a node\r\n   * @param {Number} amount\r\n   * @param {String} recipient\r\n   * @param {String} passwd if secret not included, passwd needed to sign transaction\r\n   * @param {Uint8Array | undefined} secret\r\n   * @returns {boolean}\r\n   */\r\n  async sendTransaction(amount, recipient, passwd, secret = undefined) {\r\n    if (secret === undefined) secret = await this.decryptSecret(passwd);\r\n    if (secret === null) return false;\r\n\r\n    await this.getAccount(); //refreshes account to ensure we have the latest blocks\r\n\r\n    let block = Block()\r\n      .withAmount(amount)\r\n      .withSender(this.address)\r\n      .withRecipient(recipient);\r\n\r\n    if (this.outChain.length === 0)\r\n      block.withPreviousHash(\r\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\r\n      );\r\n    else block.withPreviousHash(this.outChain[this.outChain.length - 1].hash);\r\n\r\n    block = block.build();\r\n    block.signBlock(secret);\r\n\r\n    try {\r\n      let res = await fetch(this.nodeURL + \"/block\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(block),\r\n        mode: \"cors\",\r\n      });\r\n\r\n      let json = await res.json();\r\n\r\n      if (res.status === 200 || res.status === 201) return true;\r\n      else return false;\r\n    } catch (err) {\r\n      console.log(\"Error Sending transaction:\");\r\n      console.log(err);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines an accounts balance\r\n   * @returns {Number}\r\n   */\r\n  _determineBalance() {\r\n    let balance = 0;\r\n\r\n    this.inChain.forEach((block) => {\r\n      balance += block.amount;\r\n    });\r\n\r\n    this.outChain.forEach((block) => {\r\n      balance -= block.amount;\r\n    });\r\n\r\n    return balance;\r\n  }\r\n\r\n  /**\r\n   * A way to convert arrays of objects containing block data to an array of blocks\r\n   * @param {Object[]} array\r\n   * @return {Block[]}\r\n   */\r\n  static _objectArrayToBlockArray(array) {\r\n    let blockArray = [];\r\n\r\n    array.forEach((blockData) => {\r\n      blockArray.push(Block(blockData).build());\r\n    });\r\n\r\n    return blockArray;\r\n  }\r\n}\r\n\r\nmodule.exports = Wallet;\r\n","import React, { Component } from \"react\";\r\nimport { Header } from \"react-native-elements\";\r\nimport Styles from \"../Styles/Styles.js\";\r\n\r\nexport default class ScreenHeader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Header\r\n        leftComponent={{\r\n          icon: \"menu\",\r\n          color: \"#fff\",\r\n          iconStyle: { color: \"#fff\" },\r\n          onPress: () => {\r\n            if (this.props.enabled) this.props.nav.openDrawer();\r\n          },\r\n        }}\r\n        centerComponent={{ text: this.props.title, style: { color: \"#fff\" } }}\r\n        rightComponent={{\r\n          icon: \"home\",\r\n          color: \"#fff\",\r\n          onPress: () => {\r\n            if (this.props.enabled) this.props.nav.navigate(\"Start\");\r\n          },\r\n        }}\r\n        containerStyle={Styles.header}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Button, Overlay, Input } from \"react-native-elements\";\r\nimport OverlayStyles from \"../Styles/OverlayStyles.js\";\r\n\r\nexport default function PasswordPrompt(props) {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const passIn = React.useRef();\r\n\r\n  const rejectButton = () => {\r\n    return (\r\n      <Button\r\n        title=\"Cancel\"\r\n        style={OverlayStyles.actionButton}\r\n        onPress={() => props.onCancel()}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Overlay isVisible={props.visible} onBackdropPress={props.onCancel}>\r\n      <View style={OverlayStyles.containerMain}>\r\n        <Input\r\n          ref={passIn}\r\n          label=\"Enter Password: \"\r\n          autoFocus={true}\r\n          secureTextEntry={true}\r\n          leftIcon={{ type: \"font-awesome-5\", name: \"lock\" }}\r\n          onChangeText={(text) => setPassword(text)}\r\n          style={OverlayStyles.textInput}\r\n          containerStyle={OverlayStyles.textInputContainer}\r\n        />\r\n      </View>\r\n      <View style={OverlayStyles.containerActions}>\r\n        {!loading ? rejectButton() : undefined}\r\n        <Button\r\n          title=\"Accept\"\r\n          style={OverlayStyles.actionButton}\r\n          loading={loading}\r\n          onPress={() => {\r\n            setLoading(true);\r\n\r\n            setTimeout(async () => {\r\n              let passwdCheck = await props.checkPassword(password);\r\n              setLoading(false);\r\n\r\n              if (passwdCheck) {\r\n                props.onPasswordAccept(passwdCheck);\r\n              } else {\r\n                passIn.current.shake();\r\n                passIn.current.clear();\r\n                setPassword(\"\");\r\n                props.onPasswordReject(passwdCheck);\r\n              }\r\n            }, 100);\r\n          }}\r\n        />\r\n      </View>\r\n    </Overlay>\r\n  );\r\n}\r\n","const SHA = require(\"sha.js\");\r\nconst SHA3 = require(\"js-sha3\").sha3_256;\r\nconst Keccak = require(\"js-sha3\").keccak256;\r\nconst scryptAsync = require(\"scrypt-js\").scrypt;\r\nconst randomBytes = require(\"./Random.js\");\r\nconst TextEncoder = require(\"text-encoder-lite\").TextEncoderLite;\r\nconst hexEncode = require(\"./Encode.js\").hexEncode;\r\n\r\nconst N = 16384,\r\n  r = 8,\r\n  p = 1; //used by default in nodejs crypto\r\n\r\nconst saltLength = 32;\r\n\r\n/**\r\n * Returns the 256 bit hash of the data provided\r\n * @param {Uint8Array} bytes\r\n * @return {Uint8Array}\r\n */\r\nfunction hash(bytes) {\r\n  return sha3Hash(bytes);\r\n}\r\n\r\n/**\r\n * Returns the SHA2-256 hash of the data provided\r\n * @param {Uint8Array} bytes\r\n * @return {Uint8Array}\r\n */\r\nfunction sha2Hash(bytes) {\r\n  return SHA(\"sha256\").update(bytes).digest();\r\n}\r\n\r\nfunction sha3Hash(bytes) {\r\n  return new Uint8Array(SHA3.digest(bytes));\r\n}\r\n\r\n/**\r\n * returns keccak256 hash of bytes provided\r\n * @param {Uint8Array} bytes\r\n * @return {Uint8Array}\r\n */\r\n function keccakHash(bytes) {\r\n   return new Uint8Array(Keccak.digest(bytes));\r\n}\r\n\r\n/**\r\n * Returns the hashed password using scrypt.\r\n * @param {String} passwd password to hash\r\n * @param {Number} length length of derived hash\r\n * @param {Uint8Array} salt if not provided, random is chosen and returned\r\n * @return {{salt: Uint8Array, hash: Uint8Array}}\r\n */\r\nasync function hashPassword(passwd, length, salt = undefined) {\r\n  let encoder = new TextEncoder(\"utf-8\");\r\n\r\n  if (salt === undefined) salt = randomBytes(saltLength);\r\n\r\n  let key = await scryptAsync(encoder.encode(passwd), salt, N, r, p, length); //TODO make better\r\n  return { hash: key, salt: salt };\r\n}\r\n\r\nmodule.exports = { hash, hashPassword, saltLength };\r\n","let getRandomBytes = require(\"expo-random\").getRandomBytes;\r\n\r\n/**\r\n * Cryptographically secure random bytes generation\r\n * @param {Number} numBytes\r\n * @return {Uint8Array}\r\n */\r\nfunction randomBytes(numBytes) {\r\n  return getRandomBytes(numBytes);\r\n}\r\n\r\nmodule.exports = randomBytes;\r\n","module.exports = __webpack_public_path__ + \"static/media/IconCoin.597a9af4.png\";","import { StatusBar } from \"expo-status-bar\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport { createDrawerNavigator } from \"@react-navigation/drawer\";\r\nimport Toast from \"react-native-toast-notifications\";\r\n\r\nimport StartScreen from \"./Screens/StartScreen\";\r\nimport WalletScreen from \"./Screens/WalletScreen/WalletScreen\";\r\nimport ImportScreen from \"./Screens/ImportScreen\";\r\nimport CreateWalletScreen from \"./Screens/CreateWalletScreen\";\r\nimport SettingsScreen from \"./Screens/SettingsScreen\";\r\n\r\nconst Stack = createNativeStackNavigator();\r\nconst Drawer = createDrawerNavigator();\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <NavigationContainer>\r\n        <Stack.Navigator\r\n          initialRouteName=\"Start\"\r\n          screenOptions={{ headerShown: false }}\r\n        >\r\n          <Stack.Screen name=\"WalletScreens\" component={WalletScreens} />\r\n          <Stack.Screen name=\"Start\" component={StartScreen} />\r\n          <Stack.Screen name=\"Import\" component={ImportScreen} />\r\n          <Stack.Screen name=\"CreateWallet\" component={CreateWalletScreen} />\r\n        </Stack.Navigator>\r\n      </NavigationContainer>\r\n      <Toast ref={(ref) => (global[\"Toast\"] = ref)} />\r\n    </>\r\n  );\r\n}\r\n\r\nfunction WalletScreens() {\r\n  return (\r\n    <Drawer.Navigator\r\n      initialRouteName=\"Wallet\"\r\n      screenOptions={{ headerShown: false }}\r\n    >\r\n      <Drawer.Screen name=\"Wallet\" component={WalletScreen} />\r\n      <Drawer.Screen name=\"Settings\" component={SettingsScreen} />\r\n    </Drawer.Navigator>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Button, Image } from \"react-native-elements\";\r\nimport Styles from \"../Styles/Styles.js\";\r\n\r\nexport default class StartScreen extends Component {\r\n  render() {\r\n    return (\r\n      <View style={Styles.container}>\r\n        <View style={Styles.containerImage}>\r\n          <Image\r\n            source={require(\"../assets/IconCoin.png\")}\r\n            style={Styles.image}\r\n          />\r\n        </View>\r\n        <View style={{ flex: 1, justifyContent: \"center\" }}>\r\n          <Button\r\n            title=\"Create New Wallet\"\r\n            icon={{ type: \"font-awesome\", name: \"plus-circle\" }}\r\n            buttonStyle={Styles.button}\r\n            onPress={() => this.props.navigation.navigate(\"CreateWallet\")}\r\n          />\r\n          <Button\r\n            title=\"Import From Secret\"\r\n            icon={{ type: \"font-awesome-5\", name: \"file-import\" }}\r\n            buttonStyle={Styles.button}\r\n            onPress={() => this.props.navigation.navigate(\"Import\")}\r\n          />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#1c41b7\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  containerRow: {\r\n    flexDirection: \"row\",\r\n    backgroundColor: \"#1c41b7\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  containerImage: {\r\n    flex: 1,\r\n    alignContent: \"center\",\r\n    justifyContent: \"space-evenly\",\r\n  },\r\n  button: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#1CA6B5\",\r\n    padding: 10,\r\n    margin: 5,\r\n  },\r\n  buttonRow: {\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#1CA6B5\",\r\n    padding: 15,\r\n    margin: 10,\r\n  },\r\n  textInput: {\r\n    color: \"white\",\r\n    fontSize: 14,\r\n  },\r\n  textInputContainer: {\r\n    paddingHorizontal: 35,\r\n  },\r\n  text: {\r\n    color: \"white\",\r\n    paddingHorizontal: 15,\r\n  },\r\n  headerText: {\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n    padding: 10,\r\n  },\r\n  image: {\r\n    resizeMode: \"contain\",\r\n    width: 100,\r\n    height: undefined,\r\n    aspectRatio: 1,\r\n  },\r\n  header: {\r\n    backgroundColor: \"#0080D6\",\r\n    justifyContent: \"flex-start\",\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nexport default styles;\r\n","import React, { Component, useState } from \"react\";\r\nimport { View, TouchableHighlight } from \"react-native\";\r\nimport ScreenHeader from \"../../Components/ScreenHeader.js\";\r\nimport Styles from \"../../Styles/Styles.js\";\r\n\r\nimport WalletIcon from \"./Components/WalletIcon\";\r\nimport BalanceDisplay from \"./Components/BalanceDisplay.js\";\r\nimport AddressDisplay from \"./Components/AddressDisplay.js\";\r\nimport TransactionGUI from \"./Components/TransactionGUI.js\";\r\n\r\nexport default class WalletScreen extends Component {\r\n  state = {\r\n    balance: 0,\r\n    loading: false,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.wallet = global.Wallet;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWallet().then(() => console.log(\"Wallet updated\"));\r\n  }\r\n\r\n  async updateWallet() {\r\n    this.setState({ loading: true });\r\n    this.setState({ balance: await this.wallet.getBalance() });\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={Styles.container}>\r\n        <ScreenHeader\r\n          title=\"WALLET\"\r\n          nav={this.props.navigation}\r\n          enabled={!this.state.loading}\r\n        />\r\n        <WalletIcon onPress={async () => await this.updateWallet()} />\r\n        <View style={{ flex: 1 }}>\r\n          <BalanceDisplay balance={this.state.balance} />\r\n          <AddressDisplay address={this.wallet.address} />\r\n        </View>\r\n        <View\r\n          style={{\r\n            flex: 3,\r\n            alignContent: \"flex-start\",\r\n            alignSelf: \"stretch\",\r\n          }}\r\n        >\r\n          <TransactionGUI\r\n            wallet={this.wallet}\r\n            loading={this.state.loading}\r\n            balance={this.state.balance}\r\n            afterSend={async () => {\r\n              await this.updateWallet();\r\n            }}\r\n          />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, useState } from \"react\";\r\nimport { View, TouchableHighlight } from \"react-native\";\r\nimport { Image } from \"react-native-elements\";\r\nimport Styles from \"../../../Styles/Styles.js\";\r\n\r\nexport default class WalletIcon extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={Styles.containerImage}>\r\n        <TouchableHighlight\r\n          activeOpacity={0.6}\r\n          underlayColor=\"#00C6E5\"\r\n          onPress={async () => await this.props.onPress()}\r\n        >\r\n          <Image\r\n            source={require(\"../../../assets/IconCoin.png\")}\r\n            style={Styles.image}\r\n          />\r\n        </TouchableHighlight>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Text } from \"react-native-elements\";\r\nimport Styles from \"../../../Styles/Styles.js\";\r\n\r\nexport default class BalanceDisplay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  balanceToString() {\r\n    let bal = this.props.balance.toString();\r\n\r\n    if (bal === \"0\") return bal;\r\n    else {\r\n      if (bal.length <= 4) {\r\n        return \"0.\" + \"0\".repeat(4 - bal.length) + bal;\r\n      } else {\r\n        return bal.slice(0, bal.length - 4) + \".\" + bal.slice(bal.length - 4);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Text h2={true} h2Style={Styles.headerText}>\r\n        {this.balanceToString()}\r\n      </Text>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { TouchableHighlight } from \"react-native\";\r\nimport { Text } from \"react-native-elements\";\r\nimport Styles from \"../../../Styles/Styles.js\";\r\nimport * as Clipboard from \"expo-clipboard\";\r\nimport { View } from \"react-native-web\";\r\n\r\nexport default class AddressDisplay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toast = global.Toast;\r\n  }\r\n\r\n  copyToClipboard(text) {\r\n    Clipboard.setString(text);\r\n    this.toast.show(\"Copied to clipboard.\", { duration: 2000 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <TouchableHighlight\r\n        activeOpacity={0.6}\r\n        underlayColor=\"#00C6E5\"\r\n        onPress={() => {\r\n          this.copyToClipboard(this.props.address);\r\n        }}\r\n      >\r\n        <Text style={[Styles.text, { textAlign: \"center\" }]}>\r\n          {this.props.address}\r\n        </Text>\r\n      </TouchableHighlight>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { View, TouchableHighlight } from \"react-native\";\r\nimport { Input, Button } from \"react-native-elements\";\r\nimport Styles from \"../../../Styles/Styles.js\";\r\nimport PasswordPrompt from \"../../../Components/PasswordPrompt.js\";\r\nimport * as Clipboard from \"expo-clipboard\";\r\n\r\nexport default class TransactionGUI extends Component {\r\n  state = {\r\n    recipient: \"\",\r\n    sendAmount: \"\",\r\n    passwdOverlayVisible: false,\r\n    loading: this.props.loading,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toast = global.Toast;\r\n\r\n    this.amountInRef = React.createRef();\r\n    this.recipientInRef = React.createRef();\r\n\r\n    this.lastValidSendAmount = this.state.sendAmount;\r\n  }\r\n\r\n  async longPressPaste() {\r\n    let userInput = await Clipboard.getStringAsync();\r\n    this.setState({ recipient: userInput });\r\n  }\r\n\r\n  async invalidLength(key) {\r\n    if (this.state.recipient.length === 52 && key.length === 1) {\r\n      this.recipientInRef.current.shake();\r\n    }\r\n  }\r\n\r\n  validateSendAmountText(text) {\r\n    let valid = /^$|^\\d{1,10}?(\\.(\\d{0,4}))?$/;\r\n\r\n    if (valid.test(text)) {\r\n      this.setState({ sendAmount: text });\r\n      this.lastValidSendAmount = text;\r\n    } else {\r\n      this.amountInRef.current.shake();\r\n      this.setState({ sendAmount: this.lastValidSendAmount });\r\n    }\r\n  }\r\n\r\n  parseSendAmount(amount) {\r\n    if (amount !== \"\") {\r\n      if (amount.includes(\".\")) {\r\n        let amounts = amount.split(\".\");\r\n        return (\r\n          Number.parseInt(amounts[0]) * 10000 +\r\n          Number.parseInt(amounts[1] + \"0\".repeat(4 - amounts[1].length))\r\n        );\r\n      } else {\r\n        return Number.parseInt(amount) * 10000;\r\n      }\r\n    } else return null;\r\n  }\r\n\r\n  async performTransaction(amount, recipient, secret) {\r\n    this.setState({ loading: true });\r\n\r\n    let transactionResult = await this.props.wallet.sendTransaction(\r\n      amount,\r\n      recipient,\r\n      undefined,\r\n      secret\r\n    );\r\n\r\n    if (transactionResult) {\r\n      this.toast.show(\"Transaction Successful!\", { duration: 2000 });\r\n    } else {\r\n      this.toast.show(\"Error Sending Transaction!\", { duration: 2000 });\r\n    }\r\n\r\n    this.setState({ loading: false });\r\n\r\n    setTimeout(async () => {\r\n      await this.props.afterSend();\r\n    }, 500);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View>\r\n        <PasswordPrompt\r\n          visible={this.state.passwdOverlayVisible}\r\n          checkPassword={async (passwd) => {\r\n            return await this.props.wallet.decryptSecret(passwd);\r\n          }}\r\n          onPasswordAccept={async (checkPasswdReturn) => {\r\n            this.setState({ passwdOverlayVisible: false });\r\n            this.setState({ loading: true });\r\n\r\n            //Transaction is performed here after password is verified.\r\n            await this.performTransaction(\r\n              this.parseSendAmount(this.state.sendAmount),\r\n              this.state.recipient,\r\n              checkPasswdReturn\r\n            );\r\n\r\n            this.setState({ loading: false });\r\n          }}\r\n          onPasswordReject={(checkPasswdReturn) => {}}\r\n          onCancel={() => this.setState({ passwdOverlayVisible: false })}\r\n        />\r\n        <TouchableHighlight\r\n          activeOpacity={0.1}\r\n          underlayColor=\"#00C6E5\"\r\n          onLongPress={async () => {\r\n            await this.longPressPaste();\r\n          }}\r\n          delayLongPress={700}\r\n        >\r\n          <Input\r\n            value={this.state.recipient}\r\n            ref={this.recipientInRef}\r\n            editable={!this.state.loading}\r\n            label=\"Enter Recipient Address: \"\r\n            placeholder=\"Address\"\r\n            leftIcon={{ type: \"font-awesome-5\", name: \"level-up-alt\" }}\r\n            onChangeText={(text) => {\r\n              this.setState({ recipient: text });\r\n            }}\r\n            onKeyPress={(e) => {\r\n              this.invalidLength(e.nativeEvent.key);\r\n            }}\r\n            maxLength={52}\r\n            style={Styles.textInput}\r\n            containerStyle={[\r\n              Styles.textInputContainer,\r\n              { backgroundColor: \"#1c41b7\" },\r\n            ]}\r\n            //TODO Check background colour for all views, should be inherited??\r\n          />\r\n        </TouchableHighlight>\r\n        <Input\r\n          ref={this.amountInRef}\r\n          editable={!this.state.loading}\r\n          label=\"Enter Amount: \"\r\n          placeholder=\"Amount\"\r\n          value={this.state.sendAmount}\r\n          leftIcon={{ type: \"font-awesome-5\", name: \"coins\" }}\r\n          onChangeText={(text) => {\r\n            this.validateSendAmountText(text);\r\n          }}\r\n          style={Styles.textInput}\r\n          containerStyle={Styles.textInputContainer}\r\n          keyboardType=\"decimal-pad\"\r\n        />\r\n        <Button\r\n          title=\"SEND\"\r\n          loading={this.state.loading}\r\n          icon={{ type: \"font-awesome-5\", name: \"paper-plane\" }}\r\n          buttonStyle={[Styles.button, { alignSelf: \"center\" }]}\r\n          onPress={() => {\r\n            let amount = this.parseSendAmount(this.state.sendAmount);\r\n\r\n            if (this.state.recipient.length !== 52) {\r\n              this.recipientInRef.current.shake();\r\n              this.setState({ recipient: \"\" });\r\n            } else if (amount === null || amount > this.props.balance) {\r\n              this.amountInRef.current.shake();\r\n              this.setState({ sendAmount: \"\" });\r\n            } else {\r\n              this.setState({ passwdOverlayVisible: true }); //Password overlay will perform the transaction after validating password\r\n            }\r\n          }}\r\n        />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\nimport { Button, Input } from \"react-native-elements\";\r\nimport Alert from \"../Components/Alert.js\";\r\nimport Crypto from \"../Crypto/Crypto.js\";\r\nimport Styles from \"../Styles/Styles.js\";\r\nimport Wallet from \"../Wallet/Wallet.js\";\r\n\r\nexport default class ImportScreen extends Component {\r\n  state = {\r\n    secret: \"\",\r\n    passwd: \"\",\r\n    loading: false,\r\n    alertVisible: false,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.unlockBtnRef = React.createRef();\r\n    this.passwordInRef = React.createRef();\r\n  }\r\n\r\n  async processInput() {\r\n    let decrypted = undefined;\r\n    let encryptedSecret = undefined;\r\n\r\n    let secretInput = this.state.secret;\r\n\r\n    if (\r\n      secretInput.length > 0 &&\r\n      Crypto.canDecode(secretInput.replaceAll(\"-\", \"\"))\r\n    ) {\r\n      if (secretInput.length === 52) {\r\n        await this.newWalletFromSecret();\r\n      } else {\r\n        await this.newWalletFromEncryptedSecret();\r\n      }\r\n    } else {\r\n      this.setState({ loading: false });\r\n      this.setState({ alertVisible: true });\r\n    }\r\n  }\r\n\r\n  async newWalletFromSecret() {\r\n    let secret = Crypto.decode(this.state.secret);\r\n    let address = Crypto.getPublic(secret);\r\n    let encryptedSecret = await Crypto.encrypt(secret, this.state.passwd);\r\n\r\n    this.setState({ loading: false });\r\n\r\n    global.Wallet = new Wallet(address, encryptedSecret);\r\n    this.props.navigation.navigate(\"WalletScreens\");\r\n  }\r\n\r\n  async newWalletFromEncryptedSecret() {\r\n    let decryptedSecret = await Crypto.decrypt(\r\n      this.state.secret,\r\n      this.state.passwd\r\n    );\r\n\r\n    this.setState({ loading: false });\r\n\r\n    if (decryptedSecret) {\r\n      global.Wallet = new Wallet(\r\n        Crypto.getPublic(decryptedSecret),\r\n        this.state.secret\r\n      );\r\n      this.props.navigation.navigate(\"WalletScreens\");\r\n    } else {\r\n      this.passwordInRef.current.shake();\r\n      this.passwordInRef.current.clear();\r\n      this.setState({ passwd: \"\" });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={Styles.container}>\r\n        <Alert\r\n          visible={this.state.alertVisible}\r\n          message=\"Error processing secret!\"\r\n          onClose={() => {\r\n            this.setState({ alertVisible: false });\r\n          }}\r\n        />\r\n        <Input\r\n          label=\"Enter Secret:\"\r\n          placeholder=\"Secret\"\r\n          leftIcon={{ type: \"font-awesome\", name: \"user-secret\" }}\r\n          onChangeText={(text) => this.setState({ secret: text })}\r\n          editable={!this.state.loading}\r\n          style={Styles.textInput}\r\n          containerStyle={Styles.textInputContainer}\r\n        />\r\n        <Input\r\n          ref={this.passwordInRef}\r\n          label=\"Enter password: \"\r\n          placeholder=\"password\"\r\n          leftIcon={{ type: \"font-awesome\", name: \"lock\" }}\r\n          onChangeText={(text) => this.setState({ passwd: text })}\r\n          editable={!this.state.loading}\r\n          secureTextEntry={true}\r\n          style={Styles.textInput}\r\n          containerStyle={Styles.textInputContainer}\r\n        />\r\n        <View style={Styles.containerRow}>\r\n          {!this.state.loading ? (\r\n            <RejectButton navigation={this.props.navigation} />\r\n          ) : undefined}\r\n          <Button\r\n            ref={this.unlockBtnRef}\r\n            icon={{ type: \"font-awesome\", name: \"unlock\" }}\r\n            onPress={() => {\r\n              this.setState({ loading: true });\r\n\r\n              setTimeout(async () => {\r\n                this.processInput();\r\n              }, 100); //delay needed for mobile anims\r\n            }}\r\n            buttonStyle={Styles.buttonRow}\r\n            loading={this.state.loading}\r\n          />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nclass RejectButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Button\r\n        icon={{ type: \"font-awesome\", name: \"window-close\" }}\r\n        onPress={() => this.props.navigation.navigate(\"Start\")}\r\n        buttonStyle={Styles.buttonRow}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Button, Overlay, Text } from \"react-native-elements\";\r\nimport OverlayStyles from \"../Styles/OverlayStyles.js\";\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    <Overlay isVisible={props.visible} onBackdropPress={props.onClose}>\r\n      <View style={OverlayStyles.containerMain}>\r\n        <Text h3>{props.message}</Text>\r\n      </View>\r\n      <View style={OverlayStyles.containerActions}>\r\n        <Button\r\n          title=\"OK\"\r\n          style={OverlayStyles.actionButton}\r\n          onPress={() => props.onClose()}\r\n        />\r\n      </View>\r\n    </Overlay>\r\n  );\r\n}\r\n","import React, { Component, useState } from \"react\";\r\nimport { Text, View, Alert } from \"react-native\";\r\nimport { Button, Input } from \"react-native-elements\";\r\nimport Crypto from \"../Crypto/Crypto.js\";\r\nimport Styles from \"../Styles/Styles.js\";\r\nimport Wallet from \"../Wallet/Wallet.js\";\r\n\r\nexport default class CreateWalletScreen extends Component {\r\n  state = {\r\n    passwd: \"\",\r\n    chkPasswd: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.confirmBtnRef = React.createRef();\r\n    this.passwordInRef = React.createRef();\r\n    this.passwordChkInRef = React.createRef();\r\n  }\r\n\r\n  checkPasswords() {\r\n    return this.state.passwd === this.state.chkPasswd;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={Styles.container}>\r\n        <Input\r\n          ref={this.passwordInRef}\r\n          label=\"Enter Password:\"\r\n          placeholder=\"Password\"\r\n          leftIcon={{ type: \"font-awesome\", name: \"lock\" }}\r\n          onChangeText={(text) => this.setState({ passwd: text })}\r\n          editable={!this.state.loading}\r\n          secureTextEntry={true}\r\n          style={Styles.textInput}\r\n          containerStyle={Styles.textInputContainer}\r\n        />\r\n        <Input\r\n          ref={this.passwordChkInRef}\r\n          label=\"Confirm password: \"\r\n          placeholder=\"Confirm\"\r\n          leftIcon={{ type: \"font-awesome\", name: \"lock\" }}\r\n          onChangeText={(text) => this.setState({ chkPasswd: text })}\r\n          editable={!this.state.loading}\r\n          secureTextEntry={true}\r\n          style={Styles.textInput}\r\n          containerStyle={Styles.textInputContainer}\r\n        />\r\n        <View style={Styles.containerRow}>\r\n          {\r\n            !this.state.loading ? (\r\n              <RejectButton navigation={this.props.navigation} /> //if not loading, display reject button\r\n            ) : undefined //else\r\n          }\r\n\r\n          <Button\r\n            ref={this.confirmBtnRef}\r\n            icon={{ type: \"font-awesome\", name: \"check\" }}\r\n            onPress={() => {\r\n              if (this.checkPasswords()) {\r\n                this.setState({ loading: true });\r\n\r\n                setTimeout(async () => {\r\n                  let wallet = await Wallet.createWallet(this.state.passwd);\r\n                  this.setState({ loading: false });\r\n\r\n                  global.Wallet = wallet;\r\n                  this.props.navigation.navigate(\"WalletScreens\");\r\n                }, 100); //delay allows loading anim to play on mobile\r\n              } else {\r\n                this.passwordInRef.current.shake();\r\n                this.passwordChkInRef.current.shake();\r\n              }\r\n            }}\r\n            buttonStyle={Styles.buttonRow}\r\n            loading={this.state.loading}\r\n          />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nclass RejectButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Button\r\n        icon={{ type: \"font-awesome\", name: \"window-close\" }}\r\n        onPress={() => this.props.navigation.navigate(\"Start\")}\r\n        buttonStyle={Styles.buttonRow}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Component, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Button, Overlay, Input } from \"react-native-elements\";\r\nimport ScreenHeader from \"../Components/ScreenHeader.js\";\r\nimport ValuePrompt from \"../Components/ValuePrompt.js\";\r\nimport PasswordPrompt from \"../Components/PasswordPrompt.js\";\r\nimport * as Clipboard from \"expo-clipboard\";\r\nimport Styles from \"../Styles/Styles.js\";\r\nimport Crypto from \"../Crypto/Crypto.js\";\r\n\r\nexport default class SettingsScreen extends Component {\r\n  state = {\r\n    nodeOverlayVisible: false,\r\n    passwdOverlayVisible: false,\r\n    nodeURL: global.Wallet.nodeURL,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.toast = global.Toast;\r\n    this.wallet = global.Wallet;\r\n  }\r\n\r\n  copyToClipboard(text) {\r\n    Clipboard.setString(text);\r\n    this.toast.show(\"Copied to clipboard.\", { duration: 2000 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={Styles.container}>\r\n        <ScreenHeader\r\n          title=\"SETTINGS\"\r\n          nav={this.props.navigation}\r\n          enabled={true}\r\n        />\r\n\r\n        <ValuePrompt\r\n          visible={this.state.nodeOverlayVisible}\r\n          prompt=\"Enter Node URL:\"\r\n          defaultValue={this.wallet.nodeURL}\r\n          icon={{ type: \"font-awesome-5\", name: \"link\" }}\r\n          onValueChange={(text) => this.setState({ nodeURL: text })}\r\n          onCancel={() => this.setState({ nodeOverlayVisible: false })}\r\n          onAccept={() => {\r\n            this.wallet.nodeURL = this.state.nodeURL;\r\n            this.toast.show(\"Value Changed\", { duration: 2000 });\r\n            this.setState({ nodeOverlayVisible: false });\r\n          }}\r\n        />\r\n\r\n        <PasswordPrompt\r\n          visible={this.state.passwdOverlayVisible}\r\n          checkPassword={async (passwd) => {\r\n            return await this.wallet.decryptSecret(passwd);\r\n          }}\r\n          onPasswordAccept={(checkPasswdReturn) => {\r\n            let secret = Crypto.encode(checkPasswdReturn);\r\n            this.setState({ passwdOverlayVisible: false });\r\n            this.copyToClipboard(secret); //has to be after overlay closed, or copy doesnt work on web...\r\n          }}\r\n          onPasswordReject={(checkPasswdReturn) => {}}\r\n          onCancel={() => this.setState({ passwdOverlayVisible: false })}\r\n        />\r\n\r\n        <View\r\n          style={{\r\n            flex: 1,\r\n            alignContent: \"center\",\r\n            alignSelf: \"stretch\",\r\n          }}\r\n        >\r\n          <Button\r\n            title=\"Change Node URL\"\r\n            buttonStyle={Styles.button}\r\n            onPress={() => this.setState({ nodeOverlayVisible: true })}\r\n          />\r\n          <Button\r\n            title=\"Export Encrypted Secret\"\r\n            buttonStyle={Styles.button}\r\n            onPress={() => {\r\n              this.copyToClipboard(this.wallet.encrypted);\r\n            }}\r\n          />\r\n          <Button\r\n            title=\"Export Decrypted Secret\"\r\n            buttonStyle={Styles.button}\r\n            onPress={() => this.setState({ passwdOverlayVisible: true })}\r\n          />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { Button, Overlay, Input } from \"react-native-elements\";\r\nimport OverlayStyles from \"../Styles/OverlayStyles.js\";\r\n\r\nexport default function ValuePrompt(props) {\r\n  return (\r\n    <Overlay isVisible={props.visible} onBackdropPress={props.onCancel}>\r\n      <View style={OverlayStyles.containerMain}>\r\n        <Input\r\n          label={props.prompt}\r\n          autoFocus={true}\r\n          defaultValue={props.defaultValue}\r\n          leftIcon={props.icon}\r\n          onChangeText={(text) => props.onValueChange(text)}\r\n          style={OverlayStyles.textInput}\r\n          containerStyle={OverlayStyles.textInputContainer}\r\n        />\r\n      </View>\r\n      <View style={OverlayStyles.containerActions}>\r\n        <Button\r\n          title=\"Cancel\"\r\n          style={OverlayStyles.actionButton}\r\n          onPress={() => props.onCancel()}\r\n        />\r\n        <Button\r\n          title=\"Accept\"\r\n          style={OverlayStyles.actionButton}\r\n          onPress={() => props.onAccept()}\r\n        />\r\n      </View>\r\n    </Overlay>\r\n  );\r\n}\r\n","const Elliptic = require('elliptic').eddsa;\r\nconst EC = new  Elliptic('ed25519');\r\nconst hexEncode = require('./Encode.js').hexEncode;\r\n\r\n/**\r\n * Gets a key pair from a secret\r\n * @param {Uint8Array} secret\r\n */\r\nfunction getKeysFromSecret(secret) {\r\n    return EC.keyFromSecret(secret)\r\n}\r\n\r\n/**\r\n * returns the corresponding public address of a secret, in bytes\r\n * @param {Uint8Array} secret\r\n * @return {Uint8Array}\r\n */\r\nfunction getPublic(secret) {\r\n    return getKeysFromSecret(secret).getPublic()\r\n}\r\n\r\n/**\r\n * Signs a message in bytes with a pair of keys\r\n * @param {Uint8Array} msg to sign\r\n * @param {Uint8Array} secret to sign with\r\n * @return {Uint8Array}\r\n */\r\nfunction signMessage(msg, secret) {\r\n    return getKeysFromSecret(secret).sign(msg).toBytes();\r\n}\r\n\r\n/**\r\n * Validates a message and its corresponding signature\r\n * @param {Uint8Array} msg\r\n * @param {Uint8Array} sig\r\n * @param {Uint8Array} publicKey\r\n * @return {boolean}\r\n */\r\nfunction verifySignature(msg, sig, publicKey) {\r\n    publicKey = hexEncode(publicKey);\r\n    publicKey = EC.keyFromPublic(publicKey, 'hex');\r\n    sig = Array.from(sig);\r\n    return publicKey.verify(msg, sig);\r\n}\r\n\r\nmodule.exports = {verifySignature: verifySignature, signMessage: signMessage, getPublic: getPublic};\r\n\r\n\r\n","const hashPassword = require(\"./Hash.js\").hashPassword;\r\nconst { base32Encode, base32Decode } = require(\"./Encode.js\");\r\nconst nacl = require(\"tweetnacl\");\r\nconst randomBytes = require(\"./Random.js\");\r\n\r\n/**\r\n * encrypts some data with a password\r\n * @param {Uint8Array} data\r\n * @param {String} passwd\r\n * @return {String}\r\n */\r\nasync function encrypt(data, passwd) {\r\n  let hashedPasswd = await hashPassword(passwd, nacl.secretbox.keyLength);\r\n  let encryptionNonce = randomBytes(nonceLength());\r\n  let encryptedData = nacl.secretbox(data, encryptionNonce, hashedPasswd.hash);\r\n\r\n  return (\r\n    base32Encode(encryptionNonce) +\r\n    \"-\" +\r\n    base32Encode(hashedPasswd.salt) +\r\n    \"-\" +\r\n    base32Encode(encryptedData)\r\n  );\r\n}\r\n\r\n/**\r\n *\r\n * @param {Uint8Array} encryptedData\r\n * @param {string} passwd\r\n * @param {Uint8Array} salt\r\n * @param {Uint8Array} nonce\r\n * @returns {null}\r\n */\r\nasync function decrypt(encryptedData, passwd, salt, nonce) {\r\n  let hashedPasswd = await hashPassword(passwd, nacl.secretbox.keyLength, salt);\r\n  let data = null;\r\n\r\n  try {\r\n    data = nacl.secretbox.open(encryptedData, nonce, hashedPasswd.hash);\r\n  } catch (err) {\r\n    console.log(err);\r\n    //do nothing\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction nonceLength() {\r\n  return nacl.secretbox.nonceLength;\r\n}\r\n\r\nmodule.exports = {\r\n  encrypt: encrypt,\r\n  decrypt: decrypt,\r\n  nonceLength: nonceLength,\r\n};\r\n","const hexDecode = require(\"../Crypto/Encode\").hexDecode;\r\nconst Crypto = require(\"../Crypto/Crypto.js\");\r\n\r\n/*\r\nUSAGE:\r\n\r\nimporting this file imports BlockBuilder.Block() method. Use this method to fill in a blocks data, by using the\r\nBlock.with_PROPERTY_NAME_() methods, then build the block using Block.build().\r\n */\r\n\r\n/**\r\n * Class designed to make initializing a Block easier, and easier to adapt to future requirements. Ensure\r\n * functions marked REQUIRED are used before building the block with this.build()\r\n */\r\nclass BlockBuilder {\r\n  /**\r\n   * initializes the builder. Set the properties of a new block using the functions withPROP_NAME(VALUE), where\r\n   * PROP_NAME is the property to set and VALUE is what to set the property as, before building the new block with\r\n   * .build(). If all of the new blocks properties are already assigned to an object, the properties can be directly\r\n   * added to the new block by passing the object as an argument here.\r\n   * @param {Object | undefined} toAssign all properties of this object will be assigned to our new block\r\n   * @returns {BlockBuilder}\r\n   * @constructor\r\n   */\r\n  static Block(toAssign = undefined) {\r\n    let builder = new BlockBuilder();\r\n    if (toAssign !== undefined) Object.assign(builder, toAssign);\r\n    return builder;\r\n  }\r\n\r\n  /**\r\n   * Adds a sender to the new Block. sender should be a base32 string. REQUIRED\r\n   * @param {String} sender\r\n   * @returns {BlockBuilder}\r\n   */\r\n  withSender(sender) {\r\n    this.sender = sender;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a recipient to the new Block. recipient should be a base32 string. REQUIRED\r\n   * @param {String} recipient\r\n   * @returns {BlockBuilder}\r\n   */\r\n  withRecipient(recipient) {\r\n    this.recipient = recipient;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds an amount to the new Block. REQUIRED\r\n   * @param {Number} amount\r\n   * @returns {BlockBuilder}\r\n   */\r\n  withAmount(amount) {\r\n    this.amount = amount;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * previous hash to include in the new block. All hashes should be base32 string. REQUIRED\r\n   * @param {String} previousHash\r\n   * @returns {BlockBuilder}\r\n   */\r\n  withPreviousHash(previousHash) {\r\n    this.previousHash = previousHash;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The hash of the new block. If provided should be a base32 string. NOT REQUIRED, if not provided please\r\n   * determine Blocks hash after block has been built to make the block valid.\r\n   * @param {String} hash\r\n   * @returns {BlockBuilder}\r\n   */\r\n  withHash(hash) {\r\n    this.hash = hash;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The signature of the new block. If provided should be a base32 string. NOT REQUIRED, to make block valid\r\n   * please sign it's hash with a private key after the block is built and hash is determined.\r\n   * @param {String} sig\r\n   * @returns {BlockBuilder}\r\n   */\r\n  withSig(sig) {\r\n    this.sig = sig;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds and returns a Block with the values specified by calling the other builder functions.\r\n   * @returns {Block}\r\n   */\r\n  build() {\r\n    return new Block(this);\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a block in an account.\r\n */\r\nclass Block {\r\n  /**\r\n   * Represents a block in an account. This class should only be instantiated by the BlockBuilder Class.\r\n   * @param {BlockBuilder} blockBuilder\r\n   */\r\n  constructor(blockBuilder) {\r\n    // Ensuring required parameters are set\r\n    if (blockBuilder.sender === undefined)\r\n      throw new Error(\r\n        \"Blocks require a sender! set a sender when building with: .withSender(SENDER NAME HERE)\"\r\n      );\r\n    if (blockBuilder.recipient === undefined)\r\n      throw new Error(\r\n        \"Blocks require a recipient! set a recipient when building with: .withRecipient(RECIPIENT NAME HERE)\"\r\n      );\r\n    if (blockBuilder.amount === undefined)\r\n      throw new Error(\r\n        \"Blocks require an amount! set an amount when building with: .withAmount(AMOUNT HERE)\"\r\n      );\r\n    if (blockBuilder.previousHash === undefined)\r\n      throw new Error(\r\n        \"Blocks require a previousHash! set previousHash when building with: .withPreviousHash(PREVIOUS HASH HERE)\"\r\n      );\r\n\r\n    //Sets block parameters\r\n    this.sender = blockBuilder.sender;\r\n    this.recipient = blockBuilder.recipient;\r\n    this.amount = blockBuilder.amount;\r\n    this.previousHash = blockBuilder.previousHash;\r\n    this.hash = blockBuilder.hash;\r\n    this.sig = blockBuilder.sig;\r\n  }\r\n\r\n  /**\r\n   * Determines a blocks hash\r\n   */\r\n  determineHash() {\r\n    let sender = Crypto.encode(Crypto.hash(Crypto.decode(this.sender)));\r\n    let recipient = Crypto.encode(Crypto.hash(Crypto.decode(this.recipient)));\r\n    let amount = Crypto.encode(\r\n      Crypto.hash(hexDecode(this.amount.toString(16)))\r\n    );\r\n    let prevHash = Crypto.encode(Crypto.hash(Crypto.decode(this.previousHash)));\r\n\r\n    let toHash = Crypto.decode(sender + recipient + amount + prevHash);\r\n\r\n    return Crypto.encode(Crypto.hash(toHash));\r\n  }\r\n\r\n  /**\r\n   * signs this block's hash with a secret. If no hash, determines it first.\r\n   * @param {Buffer} secret to sign with\r\n   */\r\n  signBlock(secret) {\r\n    if (this.hash === undefined) this.hash = this.determineHash();\r\n\r\n    this.sig = Crypto.encode(\r\n      Crypto.signMessage(Crypto.decode(this.hash), secret)\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = BlockBuilder.Block;\r\n","import { StyleSheet } from \"react-native\";\r\n\r\nconst styles = StyleSheet.create({\r\n  containerMain: {},\r\n  containerActions: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  actionButton: {\r\n    alignItems: \"center\",\r\n    color: \"#1CA6B5\",\r\n    backgroundColor: \"white\",\r\n    padding: 5,\r\n  },\r\n  textInput: {\r\n    fontSize: 14,\r\n  },\r\n  textInputContainer: {\r\n    paddingHorizontal: 35,\r\n  },\r\n});\r\n\r\nexport default styles;\r\n","const hash = require(\"./Hash.js\").hash;\r\nconst saltLength = require(\"./Hash.js\").saltLength;\r\nconst getRandomBytes = require(\"./Random.js\");\r\nconst { signMessage, verifySignature, getPublic } = require(\"./Sign.js\");\r\nconst { base32Encode, base32Decode } = require(\"./Encode.js\");\r\nconst { encrypt, decrypt } = require(\"./Encrypt.js\");\r\n\r\nclass Crypto {\r\n  /**\r\n   * returns a 32 byte, 256-bit hash of data provided.\r\n   * @param {Uint8Array} bytes\r\n   * @return {Uint8Array}\r\n   */\r\n  static hash(bytes) {\r\n    return hash(bytes);\r\n  }\r\n\r\n  /**\r\n   * Returns an encrypted string of data\r\n   * @param {Uint8Array} data\r\n   * @param {string} passwd\r\n   * @return {string}\r\n   */\r\n  static async encrypt(data, passwd) {\r\n    return await encrypt(data, passwd);\r\n  }\r\n\r\n  /**\r\n   * returns a byte array of the decrypted data, or null if unsuccessful decryption\r\n   * @param {String} encrypted\r\n   * @param passwd\r\n   * @return {Uint8Array | null}\r\n   */\r\n  static async decrypt(encrypted, passwd) {\r\n    let split = encrypted.split(\"-\");\r\n    let nonce = this.decode(split[0]);\r\n    let salt = this.decode(split[1]);\r\n    let data = this.decode(split[2]);\r\n\r\n    return await decrypt(data, passwd, salt, nonce);\r\n  }\r\n\r\n  /**\r\n   * signs a message with the secret provided\r\n   * @param {Uint8Array} msg\r\n   * @param {Uint8Array} secret\r\n   * @return {Uint8Array}\r\n   */\r\n  static signMessage(msg, secret) {\r\n    return signMessage(msg, secret);\r\n  }\r\n\r\n  /**\r\n   * Validates a message was signed by a given public key\r\n   * @param {Uint8Array} msg\r\n   * @param {Uint8Array} sig\r\n   * @param {String | Uint8Array} pub\r\n   * @return {boolean}\r\n   */\r\n  static verifySignature(msg, sig, pub) {\r\n    if (Object.prototype.toString.call(pub) === \"[object String]\")\r\n      pub = this.decode(pub);\r\n    return verifySignature(msg, sig, pub);\r\n  }\r\n\r\n  /**\r\n   * Returns a secrets corresponding public key\r\n   * @param {Uint8Array} secret\r\n   * @return {string}\r\n   */\r\n  static getPublic(secret) {\r\n    return this.encode(getPublic(secret));\r\n  }\r\n\r\n  /**\r\n   * returns a new randomly generated secret for private key use.\r\n   * @returns {Uint8Array}\r\n   */\r\n  static newSecret() {\r\n    return this.randomBytes(32);\r\n  }\r\n\r\n  /**\r\n   * Cryptographically secure random bytes generation\r\n   * @param {Number} numBytes\r\n   * @return {Uint8Array}\r\n   */\r\n  static randomBytes(numBytes) {\r\n    return getRandomBytes(numBytes);\r\n  }\r\n\r\n  /**\r\n   * encodes bytes to string\r\n   * @param {Uint8Array} bytes\r\n   * @return {string} base32 encoded string\r\n   */\r\n  static encode(bytes) {\r\n    return base32Encode(bytes);\r\n  }\r\n\r\n  /**\r\n   * decodes a string to bytes\r\n   * @param {String} s\r\n   * @return {Uint8Array}\r\n   */\r\n  static decode(s) {\r\n    return base32Decode(s);\r\n  }\r\n\r\n  /**\r\n   * Returns whether able to decode a string to bytes or not\r\n   * @param {String} s\r\n   * @returns {boolean}\r\n   */\r\n  static canDecode(s) {\r\n    try {\r\n      Crypto.decode(s);\r\n      return true;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Crypto;\r\n"],"sourceRoot":""}